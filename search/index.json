[{"content":"什麼是 Homebrew？ Homebrew 是一個開源的套件管理工具，可以輕鬆地安裝、更新、刪除和管理軟體或開發工具。\n在 Linux 上，Homebrew 也能幫助你處理系統的依賴性，簡化套件的管理流程。\n安裝前的準備 在開始之前，請確保你的 Linux 系統具有以下條件：\n支援的 Linux 發行版（如 Ubuntu、Debian 等）。 安裝了基本的系統工具（如 bash 和 curl）。 安裝步驟 安裝 Homebrew 執行以下命令來安裝 Homebrew：\n1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 將 Homebrew 加入 PATH 安裝完成後，將 Homebrew 加入系統的 PATH 以便隨時使用。\n執行以下命令來修改你的 .bashrc 文件：\n1 2 3 echo \u0026gt;\u0026gt; /home/你的使用者名稱/.bashrc echo \u0026#39;eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; /home/你的使用者名稱/.bashrc eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34; 這些命令會將 Homebrew 的路徑加到你的環境變數中，讓系統能正確找到 brew 命令。\n安裝 Homebrew 的依賴 這個指令會安裝一組編譯工具，確保 Homebrew 可以正常運行。\n1 sudo apt-get install build-essential 安裝 GCC 編譯器 Homebrew 依賴 GCC（GNU 編譯器集合）來構建一些套件。\n你可以透過以下指令安裝：\n1 brew install gcc 測試 確認 brew 是否正常運行\n1 brew help 常見指令 搜索套件： 1 brew search [套件名稱] 安裝套件： 1 brew install [套件名稱] 更新 Homebrew： 1 brew update 移除套件： 1 brew uninstall [套件名稱] 檢查系統狀態： 1 brew doctor ","date":"2024-12-10T00:00:00+08:00","image":"https://www.chihyu.me/images/linux/banner.jpg","permalink":"https://www.chihyu.me/2024/12/linux-homebrew-installation/","title":"如何在 Linux 上安裝 Homebrew ?"},{"content":"前言 繼上一篇 Docker 基本介紹 的說明，已經初步了解 docker，今天我們要在 Ubuntu 上安裝 docker\n在 Ubuntu 上安裝 Docker 以下是逐步在 Ubuntu 上安裝 Docker 的指南：\n更新套件 在安裝 Docker 之前，建議先更新系統中的套件以確保版本是最新的。\n1 2 sudo apt update sudo apt upgrade -y 安裝必要的依賴套件 接著，安裝一些必要的前置套件。\n1 sudo apt install apt-transport-https ca-certificates curl software-properties-common -y 新增 Docker 的軟體源及安裝 docker 添加 Docker 的 GPG 密鑰以及 Docker 軟體源到你的系統中。\n1 2 3 4 5 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; sudo apt update sudo apt install docker-ce -y 驗證安裝 安裝完成後，可以用以下指令確認 Docker 是否正在運行：\n1 sudo systemctl status docker 你應該會看到輸出顯示 Docker 處於「active (running)」狀態。\n設置開機啟動 1 sudo systemctl enable docker 以非 root 用戶執行 Docker 預設情況下，執行 Docker 指令需要使用 sudo 權限。如果希望用非 root 用戶執行 Docker，可以將當前用戶加入 docker 群組：\n1 sudo usermod -aG docker ${USER} 測試 執行一個測試容器來確認 Docker 是否正常運行： 1 docker run hello-world 執行 docker ps 的確認 會看到這樣類似的內容:\n1 2 CONTAINER ID IMAGE COMMAND CREATED STATUS NAMES 1a2b3c4d5e6f hello-world \u0026#34;/hello\u0026#34; 5 minutes ago Exited (0) 3 minutes ago amazing_brown ","date":"2024-11-14T14:00:00+08:00","image":"https://www.chihyu.me/images/docker/banner.jpg","permalink":"https://www.chihyu.me/2024/11/docker-installation-on-ubuntu/","title":"在 Ubuntu 上安裝 Docker"},{"content":"Docker 是什麼？ Docker 是一個用於開發、部署和執行應用程式的平台，利用容器來提供一致的執行環境。以下是更詳細的介紹：\n1. 容器 (Containers) Docker 容器是輕量級、獨立執行的軟體包，包含了運行應用所需的所有內容，如程式碼、執行環境、系統工具、函式庫和設定檔。容器之間以及容器與主機系統是相互隔離的，確保應用程式能夠在不同環境中一致執行。\n2. 一致性與可攜性 (Consistency and Portability) 容器封裝了所有的依賴和配置，使得應用程式可以在開發環境、測試環境或生產環境中保持一致的行為。\n3. 映像檔與 Docker Hub (Images and Docker Hub) Docker 使用映像檔作為容器的「藍圖」。映像檔通常基於其他映像檔進行自訂。Docker Hub 是一個公共的映像檔註冊庫，用戶可以在此上傳或下載映像檔，方便應用程式的分享與分發。\n4. Docker 引擎 (Docker Engine) Docker 引擎是 Docker 的核心，負責在系統上管理容器的守護程序。用戶可以透過 Docker 的命令列介面 (CLI) 或 API 與引擎互動。\n5. DevOps 與 CI/CD 整合 Docker 在 DevOps 社群中備受歡迎，因為它能簡化持續整合與持續部署 (CI/CD) 的流程，提升開發與部署的效率。\n延伸閱讀: 在 Ubuntu 上安裝 Docker ","date":"2024-11-12T14:00:00+08:00","image":"https://www.chihyu.me/images/docker/banner.jpg","permalink":"https://www.chihyu.me/2024/11/docker-introduction/","title":"Docker 基本介紹"},{"content":"前言 SSH Key 是一種基於加密的身份驗證方式，常用於遠端連線伺服器或版本控制系統（如 Git）。以下是如何在 Linux 系統上快速生成 SSH Key 的步驟。\n主要 打開 Terminal 並執行指令 首先，開啟 Terminal 並執行以下指令來產生新的 SSH Key：\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 指令說明:\nssh-keygen：產生 SSH 金鑰的工具。 -t rsa：指定使用 RSA 演算法生成金鑰。 -b 4096：設定金鑰長度為 4096 位元，以提升安全性。 -C \u0026ldquo;your_email@example.com\u0026rdquo;：附加一個 email 作為此金鑰的識別標籤。 指定存放位置 執行指令後，系統會詢問是否要儲存金鑰至預設路徑（~/.ssh/id_rsa）。如果接受預設路徑，直接按下 Enter；\n若希望存到其他路徑，則可手動指定路徑。\n1 Enter file in which to save the key (/home/username/.ssh/id_rsa): 設定密碼（選填） 接著會提示是否為 SSH Key 設定密碼。這是額外的安全層，若設置密碼，在使用 SSH Key 時需要輸入該密碼。\n若不需要密碼，按下 Enter 跳過此步驟。\n1 Enter passphrase (empty for no passphrase): 完成並確認金鑰生成 完成上述步驟後，系統會生成一組公鑰（id_rsa.pub）和私鑰（id_rsa）， 分別儲存在 ~/.ssh 目錄下。您可以使用以下命令檢視生成的公鑰：\n查看公鑰 1 cat ~/.ssh/id_rsa.pub ","date":"2024-10-29T00:00:00+08:00","image":"https://www.chihyu.me/images/linux/banner.jpg","permalink":"https://www.chihyu.me/2024/10/linux-generate-ssh-key/","title":"Linux 產生 SSH Key"},{"content":"前言 繼上一篇 讓 Windows 直接使用 Linux (一) - WSL2 安裝 的說明，我們已經能順利在 windows 使用 Linux 了。\n所以這篇我要來說明，如果複製多個 Linux 使用，各自的 Linux，都是獨立的機器。\n為什麼會需要複製呢 ? 以我的情境，一台空白的電腦一定需要安裝自己習慣使用的軟體，所以我會將第一台 Linux 安裝我要的軟體當作基底，然後複製出其他我平常要使用的， 萬一有哪天要重新安裝的時候，就不用全部重來，只需要把我設定好的再複製出來一次即可，非常方便。\n如何複製 其實就是將我的容器匯出再匯入一個新的這樣，以下我會說明如何匯出及匯入。\n匯出 開啟 Power Shell 並使用系統管理員。\n指令 1 wsl --export \u0026lt;distribution name\u0026gt; \u0026lt;export file name\u0026gt; 欄位 說明 \u0026lt;distribution name\u0026gt; WSL中要匯出的發行版名稱。 \u0026lt;export file name\u0026gt; 將匯出的發行版存為的檔案名稱及路徑。 example 1 wsl --export Ubuntu ubuntu.tar 匯出後就會產生一個 tar 壓縮檔。\n匯入 透過匯出產生的 tar 檔，匯入新的。\n指令 1 wsl --import \u0026lt;new distribution name\u0026gt; \u0026lt;install location\u0026gt; \u0026lt;export file name\u0026gt; example 1 wsl --import UbuntuDev1 .\\UbuntuDev1 ubuntu.tar 欄位 說明 \u0026lt;new distribution name\u0026gt; 匯入的 WSL 發行版的名稱。 \u0026lt;install location\u0026gt; 新發行版的安裝路徑。 \u0026lt;export file name\u0026gt; 要匯入的 .tar 檔案。 ⚠️ 這需要注意安裝的路徑，匯入後會在當下產生一個路徑產生資料夾 作為 WSL 綁定的名稱。 (這個資料夾砍掉裡面東西就沒了)\nTerminal 設定 這邊還有一個小小 tips ， 新複製出來的權限會再 root，若要開啟就是平常的使用的 user 的話， 就加上 -u user 這邊 user 指得是我當初建立 Ubuntu 的使用者，可以改成你們當初建立的使用者為主。\n","date":"2024-10-28T00:00:00+08:00","image":"https://www.chihyu.me/images/windows/wsl2-banner.png","permalink":"https://www.chihyu.me/2024/10/windows-wsl2-export-and-import/","title":"讓 Windows 直接使用 Linux (二) - WSL2 複製術"},{"content":"前言 在 Windows 系統中運行 WSL（Windows Subsystem for Linux）可以讓開發者不需虛擬機就直接執行 Linux 環境，但在安裝或設定時，有時可能會遇到 WslRegisterDistribution failed with error: 0x8004032d 錯誤，通常是因為 WSL 設定不當、系統元件過舊或 Windows 設定衝突所致。本文將提供快速解決此問題的步驟。\n解決方法 1. 確認 WSL 已正確安裝 開啟 PowerShell（以系統管理員身分執行），輸入以下命令以啟用 WSL 和虛擬機平台功能：\n1 2 dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 完成後重啟電腦。\n2. 更新 Windows 系統 前往設定 \u0026gt; 更新與安全性 \u0026gt; Windows Update，檢查並安裝最新更新，並重啟電腦。\n3. 確認下載最新版本的 WSL 若使用 WSL2，請前往 Microsoft WSL 核心更新頁面 下載並安裝最新版本，然後重開機。\n4. 重置或註銷問題的 Linux 發行版本 在 PowerShell 中列出已安裝的發行版本：\n1 wsl --list --verbose 註銷問題的發行版本:\n1 2 3 4 wsl --unregister \u0026lt;wsl-nam\u0026gt; # 假設為 Ubuntu # example: wsl --unregister Ubuntu 5. 重新安裝 WSL 1 2 wsl --uninstall wsl --install 6. 檢查系統檔案 開啟 Powershell\n1 sfc /scannow 使用 DISM 工具修復 Windows 映像\n1 DISM /Online /Cleanup-Image /RestoreHealth 7. 確認 Hyper-V 和虛擬化功能已啟用 在 PowerShell 啟用 Hyper-V 功能：\n1 dism.exe /online /enable-feature /featurename:Microsoft-Hyper-V-All /all /norestart 重新開機並進入 BIOS/UEFI 設定，確認已啟用虛擬化功能。\n8. 檢查有無衝突軟體 更新或移除 VMware 或 VirtualBox 等虛擬化軟體，這些軟體可能與 WSL2 發生衝突。\n總結 當遇到 WSL 錯誤 0x8004032d，可以透過以上步驟解決。\n參考連結 How to Fix the WslRegisterDistribution Error: 0x8004032d in Windows\n","date":"2024-10-15T00:00:00+08:00","image":"https://www.chihyu.me/images/windows/wsl2-banner.png","permalink":"https://www.chihyu.me/2024/10/windows-wsl2-install-error-0x8004032d/","title":"WSL2 安裝錯誤 0x8004032d 問題解決"},{"content":"前言 - 開發環境選擇 Windows 開發 過去的我，使用 windows 開發程式，發現會遇到很多雷，一下組件缺少、一下更新後就狀況一堆，再加上當時要使用 docker 找不到方法使用。\n於是後來，我在一台電腦安裝雙系統， 開機選項增加 Linux ，解決了我不少開發上的問題雷，也能順利使用 docker。\n雙系統開發 雙系統，Linux 開發很好用，不過軟體我覺得還是　Windows 強很多。\n舉幾個 Linux 軟體難用/我不習慣的地方:\nLINE: 沒有 Linux 版本，我只能使用 chrome 插件，很多功能都沒有。 ex: 沒辦法回覆、沒辦法收回 等等 .. (不過後來好像更新了) 輸入法: 輸入法很多詞是沒有連貫的，這導致很多字都要自己選，讓打字變得很慢很不順 office: 從小用到大的 office 實在是太好用了，linux 只能安裝 libreoffice，雖然工程師沒什麼文件，不過當時上班，跨部門常常需要文件溝通，每次開起來就會先跑版一次。 種種問題讓我要使用軟體的時候，乾脆直接重開機，選擇 window 處理行政事務，再回去 Linux 進行開發。 但是這樣反反覆覆，也是非常的麻煩\u0026hellip;\n發現 WSL 後來我發現 Windows 發布了 WSL 2 (適用於Linux的Windows子系統)，安裝上非常容易，同時也讓我解決系統切換的問題。\n安裝 WSL 安裝只需兩步驟， 執行指令 \u0026amp; 重開機\nPowerShell 執行指令 系統管理員模式中開啟 PowerShell 或 Windows 命令提示字元\n1 wsl --install 重新開機 安裝好後重新開機，你就會在資料夾側欄發現 Linux \u0026gt; Ubuntu ，而裡面的資料夾，就跟平常在使用 Ubuntu 的資料夾相同，\n選擇終端機 (Terminal) [非必要] 我是使用這套: Windows Terminal\n我覺得好用而且美觀。\n結語 如此一來，軟體的使用可以一樣依賴 Windows，程式開發的部分可以依賴 linux ubuntu。\n而且這個 Linux 子系統完全不限於一台，我可以一台 Windows 多個 linux 也是OK的， 像我就會分成\n開發公司軟體 (主要機) 開發公司軟體 (備用機) 私人使用的 Ubuntu 基本款的 (除原OS，會安裝一些我常用的軟體、工具)，後續若要複製出來，或是有哪一台壞掉了，可以從這邊複製出去 下一篇，我們來說明如何複製多台 Linux，讓一台電腦多個 Linux\n延伸閱讀: 讓 Windows 直接使用 Linux (二) - WSL2 複製術 參考連結 https://learn.microsoft.com/zh-tw/windows/wsl/install\n","date":"2024-10-01T00:00:00+08:00","image":"https://www.chihyu.me/images/windows/wsl2-banner.png","permalink":"https://www.chihyu.me/2024/10/windows-wsl2-introduction/","title":"讓 Windows 直接使用 Linux (一) - WSL2 安裝"},{"content":"前言 當我們將 windows 的檔案直接複製到 wsl 裡面時，會出現好多 Zone.Identifier 的檔案\n解決方法 移動到對應的資料夾，並且執行，批次刪除:\n1 find . -name \u0026#34;*:Zone.Identifier\u0026#34; -type f -delete 原因 詳細原因直接參考連結，感謝!\n參考連結 https://www.sulinehk.com/post/reasons-and-solutions-for-the-zoneidentifier-file-appearing-in-wsl/\n","date":"2024-09-25T00:00:00+08:00","image":"https://www.chihyu.me/images/windows/wsl2-banner.png","permalink":"https://www.chihyu.me/2024/09/windows-wsl2-export-and-import/","title":"Windows WSL2 移除 Zone.Identifier 檔案"},{"content":"前言 在使用 Git 進行版本控制時，隨著時間的推移，我們的本地倉庫中可能會積累許多不再使用的分支。\n特別是當遠端倉庫中的分支已被刪除時，這些無用的本地分支會變得更加雜亂無章。\n為了保持倉庫整潔，我們可以基於遠端已刪除的分支，來自動刪除本地對應的分支。以下是具體的操作步驟。\n使用方法 獲取遠端分支信息 確保你的本地倉庫是最新的，並從遠端獲取所有分支的信息：\n1 git fetch --prune --prune 參數會刪除本地跟蹤的那些已經在遠端被刪除的分支。\n刪除本地不存在於遠端的分支 接著，你可以列出所有本地分支，並刪除那些在遠端不存在的分支。使用以下命令：\n1 git branch -vv | grep \u0026#39;: gone]\u0026#39; | awk \u0026#39;{print $1}\u0026#39; | xargs -r git branch -d git branch -vv：列出所有本地分支，並顯示它們是否跟蹤遠端分支。\ngrep ': gone]'：篩選出那些遠端分支已被刪除的本地分支（顯示為 gone）。\nawk '{print $1}'：獲取這些分支的名稱。\nxargs -r git branch -d：刪除這些分支（-d 表示刪除分支，如果確定可以使用 -D 強制刪除）。\n手動刪除 如果你有具體的分支名稱，且你確定它在遠端已經不存在，也可以直接刪除該分支：\n1 git branch -d \u0026lt;branch-name\u0026gt; -d 為刪除， 若 -D 為強制刪除\n結論 透過這些步驟，你可以有效地清理那些已經在遠端被刪除的本地分支，保持分支的乾淨。\n","date":"2024-08-28T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2024/08/git-cli-branch-delete-fetch-origin/","title":"刪除不存在遠端分支的本地分支"},{"content":"前言 在開始一個功能時，可能會在主線(master) 開出新的分支(feature-x) 出去進行，\n我們在支線(feature-x) 可能 commit 了好多次，\n但是希望有一天併回去主線(master)的時候可以只留下一個主要功能的 commit，\n避免分支看起來非常雜亂\n語法使用 1 rebase -i \u0026lt;commit-id\u0026gt; commit-id 放你要要改寫的前一個點\n直接上實例可能會比較了解 如圖可以看到這是我們目前分支狀況\n(圖片的分支與平常使用的方向相反，愈下面愈新)\n我們從 C2 切了一個新分支出來 feature-x， 我要把 C3,C4,C5 合併回去 master\n但是我希望合併回去時只有一個 commit，\n我需要在feature-x 分支下\nstep 1：下指令 我要修改他們！ 1 2 git checkout feature-x git rebase -i C2 ⭐ 這邊很重要 ！ 我們需要取用將他們合起來的前一個點 C2 當起點\nstep 2： 要怎麼修改他們呢 執行完後，會出現一個編輯介面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 pick C3 feature - commit message aaaaaaa pick C4 fix-abc pick C5 fix-def # Rebase C2..C5 onto C2 # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \u0026#34;squash\u0026#34;, but discard this commit\u0026#39;s log message # x, exec = run command (the rest of the line) using shell # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out 上面 pick 是你目前 commit 區間 C3,C4,C5\n這邊 commit 順序與我們平常看的相反\npick: 就是會保留這個 commit fixup: 就是會拿掉這個 commit 這兩個最常用，因為其他我也沒有使用過 🤣🤣🤣\n因為我們只要保留一個 C3\n所以我們將 C4,C5 的前面 pick 改成 f\n1 2 3 pick C3 feature - commit message aaaaaaa f C4 fix-abc f C5 fix-def 然後\n儲存 ！\nstep3: 完成了 完成後，分支就會長這樣\n如此一來將 feature-x 合併回去 master 時，就會只看到一個 commit\nstep4: 合併回去 master 1 2 git checkout master git merge feature-x --no-ff ","date":"2023-03-21T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2023/03/git-cli-rebase-interactive/","title":"利用 git rebase -i 改寫歷史，給我一個整齊的分支線！"},{"content":"主要 除錯時常需要打開錯誤訊息，以下提供便捷的方式\n在php檔案中 可以在 PHP 檔案最上方加入這三行程式碼\n1 2 3 ini_set(\u0026#39;display_errors\u0026#39;, 1); ini_set(\u0026#39;display_startup_errors\u0026#39;, 1); error_reporting(E_ALL); 在 php.ini 設定 打開 php.ini 的檔案，並於設定後重啟服務\n1 display_errors = on 各系統的 php.ini 檔案位置不同\n","date":"2023-03-20T00:00:00+08:00","image":"https://www.chihyu.me/images/php/banner.jpg","permalink":"https://www.chihyu.me/2023/03/php-display-errors/","title":"PHP 顯示錯誤訊息"},{"content":"前言 說到 Laravel 匯出 excel 相信大家肯定對這套件不陌生\n套件連結\n不過文件內沒有提到如何透過 api 的方式下載檔案，\n我自己也摸索好久，終於找到方法了\n想說來跟大家分享一下\n主要 環境介紹 maatwebsite/excel 版本 3.1 前端 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 檔案名稱 let fileName = \u0026#39;xxx.xlsx\u0026#39;; // api 路徑 let url = \u0026#39;\u0026#39;; // 資料 let data = {}; axios.post(url, data, { responseType: \u0026#39;arraybuffer\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, } }).then((response) =\u0026gt; { const url = window.URL.createObjectURL(new Blob([response.data], { // xlsx type: \u0026#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\u0026#39;, // xls // type: \u0026#39;application/vnd.ms-excel\u0026#39; })); const link = document.createElement(\u0026#39;a\u0026#39;); link.href = url; link.setAttribute(\u0026#39;download\u0026#39;, fileName); document.body.appendChild(link); link.click(); }) .catch((error) =\u0026gt; { console.log(error); }); \u0026lt;/script\u0026gt; 檔案類別可以參考： MIME Types\nAPI 的 controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 use Illuminate\\Http\\Request; use App\\Exports\\OrderExport; use Maatwebsite\\Excel\\Facades\\Excel; class OrderExportController extends Controller { /** * 匯出 */ public function export(Request $request) { // ... return Excel::download(new OrderExport($orders), \u0026#39;訂單.xlsx\u0026#39;); } } 這邊就不特別解釋 Excel::download 的使用方法了\n之後再跟大家分享\n","date":"2022-12-23T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner.png","permalink":"https://www.chihyu.me/2022/12/laravel-magic-use-axios-export-excel/","title":"Laravel 使用 axios 匯出 Excel"},{"content":"前言 LINE 商家也可以設定通話功能\n設定之前請先閱讀\n註冊商家 安裝手機APP 開啟設定 手機設定 從聊天畫面開啟聊天設定。 在聊天設定中點選電話的項目。 在電話的設定畫面中啟用「LINE通話」後，即可使用電話。也可視需要啟用視訊通話。 啟用「LINE 通話」後，在電話設定的頁面最下方找到宣傳LINE Call的網址與行動條碼。 電腦設定 開啟聊天頁籤。 從右側選單開啟設定(a)，前往電話頁籤(b)。 在基本設定的語音通話中選擇「LINE通話」後，即可使用LINE Call功能。也可視需要啟用視訊通話。 開啟「LINE通話」後，即可以於電話頁籤的最下方找到宣傳LINE Call的網址與行動條碼。 邀請通話 手機 使用聊天室畫面左下方的＋按鈕顯示選單。 點選通話要求。 請確認彈出的內容後，點選發送鈕。 發送通話要求的步驟到此完成。 用戶點選通話要求的撥打電話鈕後，即可撥打電話給LINE官方帳號。 電腦 使用聊天室畫面右下方的電話圖示選擇通話要求。 請確認彈出的內容後，點選發送鈕。 發送通話要求的步驟到此完成。 用戶點選通話要求的撥打電話鈕後，即可撥打電話給LINE官方帳號。 其他 設定用戶來電通知 文章來源： https://tw.linebiz.com/manual/line-official-account/oa-call/\n","date":"2022-12-19T02:00:00+08:00","image":"https://www.chihyu.me/images/line/banner.jpeg","permalink":"https://www.chihyu.me/2022/12/line-biz-business-set-call/","title":"LINE@ 設定可通話/視訊"},{"content":"主要 安卓用戶 安裝連結\n蘋果用戶 安裝連結\n","date":"2022-12-19T01:00:00+08:00","image":"https://www.chihyu.me/images/line/banner.jpeg","permalink":"https://www.chihyu.me/2022/12/line-biz-business-install-app/","title":"LINE@ 商家安裝手機 APP"},{"content":"主要 今天跟大家分享註冊 LINE商家註冊\n資源 點選： 註冊網址\n點擊 『使用電子郵件帳號註冊』 我是選擇透過信箱註冊的\n填寫信箱及點擊『傳送註冊用連結』 此時到你的信箱就會收到 LINE 的 通知信\n到信箱收信 點擊 『前往註冊頁面』\n填寫商家基本資訊 點選註冊信件的連結後，就是設定商家的資訊了\n依照你的商家填寫即可\n結論 這樣就完成了，簡單又快速\n","date":"2022-12-19T00:00:00+08:00","image":"https://www.chihyu.me/images/line/banner.jpeg","permalink":"https://www.chihyu.me/2022/12/line-biz-create-business-id/","title":"LINE@ 註冊商家"},{"content":"前言 不曉得大家有沒有像我有一樣的困擾\n我平常開方都是使用 ubuntu\n不過我滑鼠在滾動的時候，有時候只要按到就會直接貼上我剛剛選取的內容\n可能有些人會覺得便利， 但我覺得很困擾\n實在用不習慣這個操作 哈哈哈\n於是我去網路上找了解法\n照著做就能用\n來源: 資源\n操作說明 安裝套件 1 sudo apt-get install xbindkeys xsel xdotool 新增 .xbindkeysrc 檔 在 ~/ 路徑底下新增檔案 .xbindkeysrc\n1 2 cd ~ touch .xbindkeysrc 新增 xbindkey 設定檔 提供兩個方法可以寫入\n方法一：在 Terminal 下\n1 echo -e \u0026#39;\u0026#34;echo -n | xsel -n -i; pkill xbindkeys; xdotool click 2; xbindkeys\u0026#34; \\n b:2 + Release\u0026#39; \u0026gt; ~/.xbindkeysrc 或者 ~ 方法二：開啟檔案貼上 檔案: ~/.xbindkeysrc 寫入內容:\n1 2 \u0026#34;echo -n | xsel -n -i; pkill xbindkeys; xdotool click 2; xbindkeys\u0026#34; b:2 + Release 設定加載 xbindkeys 在 Terminal 下\n1 xbindkeys -p 搞定!\n","date":"2022-12-08T14:00:00+08:00","image":"https://www.chihyu.me/images/linux/banner.jpg","permalink":"https://www.chihyu.me/2022/12/linux-disable-mouse-middle-click-paste/","title":"關閉 Linux 滑鼠滾輪鍵貼上的方法"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 29. 分頁 Pagination\n主要 很快的來到了最後一天\n其實還有很多東西可以分享 短短三十天很難將我過去所學的項目一一分享\n也是要訓練自己對 Laravel 的熟悉的程度\n才會開這個系列\nLaravel7 可能在我職涯也會慢慢走路歷史了吧\n之後可能會使用更新的版本\n當然，若有不錯的項目還是會想要持續分享\n也算是一個互相學習的過程\n希望大家再開發的路上都一切順利 ~~~~\n","date":"2022-11-30T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day29-pagination/","title":"Day 30. 結束"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 28. Log\n結束 Log 使用\n今天繼續來優化我們的 ToDo List吧\n聊聊我們的 Pagination\n主要 上文件 Pagination 分頁\n顧名思義就是將資料分頁 避免當下頁面資料量過多會影響使用者體驗\n使用其使也很輕鬆簡單\n如何使用 controller 我們將原本列表要 get() 改成 paginate()\n檔案: app/Http/Controllers/TaskController.php\n1 2 3 4 5 6 public function index() { $tasks = Auth::user()-\u0026gt;tasks()-\u0026gt;paginate(5); return view(\u0026#39;tasks.index\u0026#39;, compact(\u0026#39;tasks\u0026#39;)); } 參數是一頁要幾筆\n只要這樣 Laravel 就會幫你做好分頁\nview 加上\n1 {{ $tasks-\u0026gt;links() }} 完成！\nDemo 當然，如果頁面的樣式你不喜歡可以自定義\n之後再跟大家分享如何客制\n今天先簡單說明這個方便的功能就好\n","date":"2022-11-29T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day29-pagination/","title":"Day 29. 分頁 Pagination"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 27. Session\n結束 session\n今天要來聊聊 Log\n主要 上文件\n預設的 Log 是一個檔案\n你可以在你的程式裏面埋入你要寫入的 Log 而這些 Log 會被存放在 storage/logs 裏面\n你可以在 .env 設定你的 Log 類別\n官方有提供很多種，\n我都是使用 daily 每天會產生一個以日期為主的檔案\n級別 1 2 3 4 5 6 7 8 Log::emergency($message); Log::alert($message); Log::critical($message); Log::error($message); Log::warning($message); Log::notice($message); Log::info($message); Log::debug($message); 如何使用？ env 設定 使用 1 2 3 4 5 6 7 8 9 use Illuminate\\Support\\Facades\\Log; class TaskController extends Controller { public function index() { Log::info(\u0026#39;log test\u0026#39;); // ... } 檢查 就是這樣簡單\n","date":"2022-11-28T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day28-log/","title":"Day 28. Log"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 26. Validation-2 Request 讓 Controller 更乾淨\n今天來跟各位聊聊 session\n主要 上文件\n開發過網站的肯定都對 session 不陌生\n今天就不多加綴述他是什麼\n只是剛好開發 todo功能 剛好想到可以講一下\n我們平常送出表單的時候\n都會希望系統有所回應 如『新增成功』、『新增失敗』等等\u0026hellip;\nflash session flash session 就是只會保留一次的短暫 session 跳轉下個頁面就不會存在了\n1 session()-\u0026gt;flash(\u0026#39;key\u0026#39;, \u0026#39;value\u0026#39;); 這樣就可以使用了 ~\n所以我們只需要在 Controller 更新後 加上\n檔案: app/Http/Controllers/TaskController.php\n1 2 3 4 5 6 7 8 9 public function update(TaskRequest $request, Task $task) { $task-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; $request-\u0026gt;title ]); session()-\u0026gt;flash(\u0026#39;flash-alert-success\u0026#39;, \u0026#39;更新成功!\u0026#39;); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } 然後在列表的地方讀取這個session\n檔案: resources/views/tasks/index.blade.php\n1 2 3 4 5 6 7 8 9 @if (session(\u0026#39;flash-alert-success\u0026#39;)) \u0026lt;div class=\u0026#34;alert alert-success\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; {{ session(\u0026#39;flash-alert-success\u0026#39;) }} \u0026lt;/div\u0026gt; @elseif (session(\u0026#39;flash-alert-error\u0026#39;)) \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; {{ session(\u0026#39;flash-alert-error\u0026#39;) }} \u0026lt;/div\u0026gt; @endif Demo ","date":"2022-11-27T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day27-session/","title":"Day 27. Session"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 25. Validation\n上篇我們聊了 驗證， 接著我們來說我平常使用驗證的方法，\n主要 今天範例的驗證欄位比較少，所以可能比較沒感覺，\n平常驗證欄位只要多 controller 的頁面就會變很肥，\n所以驗證可以搬到其他物件去做，\n讓 controller 乾淨一點\n設定 Request 文件\n執行指令\n1 php artisan make:request TaskRequest 這樣就會在 app/Http/Requests 看到你產生的檔案 TaskRequest.php\n可以把原本的驗證項目放進去 rules() 的 function 了\n檔案: app/Http/Requests/TaskRequest.php\n規則設定 1 2 3 4 5 6 public function rules() { return [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required\u0026#39; ]; } 開關 另外我們可以把 authorize() 設定成 true\n1 2 3 4 public function authorize() { return true; } 自定義錯誤訊息 錯誤訊息可以放在 messages()\n這個 function 是沒有預設產生的，要自己加上去\n1 2 3 4 5 6 public function messages() { return [ \u0026#39;title.required\u0026#39; =\u0026gt; \u0026#39;標題欄位是必填的\u0026#39; ]; } 設定 controller 把原本 $request 注入 Request 改成剛剛建立的 TaskRequest\n1 2 3 4 5 6 7 8 public function store(TaskRequest $request) { Auth::user()-\u0026gt;tasks()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; $request-\u0026gt;title ]); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } 這樣就可以了\nDEMO ","date":"2022-11-26T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day26-validation-request/","title":"Day 26. Validation-2 Request 讓 Controller 更乾淨"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 24. 實作 TODO 練習 下篇:畫面及功能\n上篇實作了 ToDo 的一些簡單功能及頁面， 接著我們來說『驗證』\n主要 上文件\nLaravel 的驗證真的滿方便的，\n可以參考規則\n這些規則都可以設定驗證\n驗證失敗的時候就會導回去前面那一頁，\n這時候就可以跟 old() 搭配保留原本的值，\n快速上手 如我們範例 TODO 只需要驗證一個 title 為必填 可以再表單送出的那刻加上驗證，\n失敗的話就會導回去前面那頁的表單，\n檔案: app/Http/Controllers/TaskController.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 public function store(Request $request) { // 加這個 !!! Validator::make($request-\u0026gt;all(), [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required\u0026#39; ])-\u0026gt;validate(); Auth::user()-\u0026gt;tasks()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; $request-\u0026gt;title ]); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } 而我們要如何接收值呢？ 驗證失敗的時候我們都會接收到一個 $errors 參數\n如以下範例\n檔案: resources/views/tasks/create.blade.php\n1 2 3 4 5 6 7 @if ($errors-\u0026gt;has(\u0026#39;title\u0026#39;)) @foreach ($errors-\u0026gt;get(\u0026#39;title\u0026#39;) as $message) \u0026lt;div style=\u0026#34;color:red;\u0026#34;\u0026gt; {{ $message }} \u0026lt;/div\u0026gt; @endforeach @endif 範例 ","date":"2022-11-25T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day25-validation/","title":"Day 25. Validation"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 23. 實作 TODO 練習 上篇:前置作業 上篇主要建制一些前置作業 接下來要實作 ToDo 的一些簡單功能及頁面，\n主要 controller 可以直接參考我的 TaskController\n檔案: app/Http/Controllers/TaskController.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class TaskController extends Controller { /** * 列表頁 */ public function index() { $tasks = Auth::user()-\u0026gt;tasks; return view(\u0026#39;tasks.index\u0026#39;, compact(\u0026#39;tasks\u0026#39;)); } /** * 新增頁 */ public function create() { return view(\u0026#39;tasks.create\u0026#39;); } /** * 新增 */ public function store(Request $request) { Auth::user()-\u0026gt;tasks()-\u0026gt;create([ \u0026#39;title\u0026#39; =\u0026gt; $request-\u0026gt;title ]); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } /** * 更新頁 */ public function edit(Task $task) { return view(\u0026#39;tasks.edit\u0026#39;, compact(\u0026#39;task\u0026#39;)); } /** * 更新 */ public function update(Request $request, Task $task) { $task-\u0026gt;update([ \u0026#39;title\u0026#39; =\u0026gt; $request-\u0026gt;title ]); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } /** * 刪除 */ public function destroy(Task $task) { $task-\u0026gt;delete(); return redirect()-\u0026gt;route(\u0026#39;tasks.index\u0026#39;); } } view view 的頁面都在這個資料夾裏面 resources/views/tasks/\n列表頁: resources/views/tasks/index.blade.php 新增頁: resources/views/tasks/create.blade.php 更新頁: resources/views/tasks/edit.blade.php ","date":"2022-11-24T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day23-todo-main/","title":"Day 24. 實作 TODO 練習 下篇:畫面及功能"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 22. CRUD 很簡單 Resource Controller\n接下來準備實作 ToDo 的功能， 這是上篇主要建制一些前置作業\n主要 todo 功能我會以 task(任務) 作為命名，\n因為我感覺這樣比較直觀一點\n資料庫設計 建立 Model + Migration 1 php artisan make:model Models/Task -m 編輯 Migration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class CreateTasksTable extends Migration { /** * Run the migrations. * * @return void */ public function up() { Schema::create(\u0026#39;tasks\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;)-\u0026gt;constrained(\u0026#39;users\u0026#39;)-\u0026gt;onUpdate(\u0026#39;cascade\u0026#39;)-\u0026gt;onDelete(\u0026#39;cascade\u0026#39;); $table-\u0026gt;string(\u0026#39;title\u0026#39;, 100)-\u0026gt;comment(\u0026#39;標題\u0026#39;); $table-\u0026gt;timestamps(); $table-\u0026gt;softDeletes(); }); } /** * Reverse the migrations. * * @return void */ public function down() { Schema::dropIfExists(\u0026#39;tasks\u0026#39;); } } 執行 Migration 1 php artisan migrate 調整 Model 檔案 app/Models/Task.php\n加入 fillable 關聯 user 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Task extends Model { protected $fillable = [ \u0026#39;user_id\u0026#39;, \u0026#39;title\u0026#39; ]; /** * 關聯會員 * * @return Illuminate\\Database\\Eloquent\\Model User */ public function user() { return $this-\u0026gt;belongesTo(User::class); } } 檔案 app/Models/User.php\n關聯 Task (一對多) 1 2 3 4 5 6 7 8 9 10 11 12 13 class User extends Authenticatable implements MustVerifyEmail { /** * 關聯 Task * * @return Illuminate\\Database\\Eloquent\\Model Task */ public function tasks() { return $this-\u0026gt;hasMany(Task::class); } } 建立 Controller 1 php artisan make:controller TaskController -r 建立路由 1 Route::resource(\u0026#39;tasks\u0026#39;, \u0026#39;TaskController\u0026#39;); ","date":"2022-11-23T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day23-todo-intro/","title":"Day 23. 實作 TODO 練習 上篇:前置作業"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 21. 資料整理好幫手 - Collection\n接下來會實作 ToDo 的功能， 實作前我們先介紹一下 Resource Controllers\n主要 上文件\n之前我們於Day 5. 路由: Router 有介紹過我推薦的 route crud的使用，直接附上上次範例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;users\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;users.\u0026#39;], function () { // 列表 Route::get(\u0026#39;/\u0026#39;, \u0026#39;UserController@index\u0026#39;)-\u0026gt;name(\u0026#39;index\u0026#39;); // 新增 Route::get(\u0026#39;/create\u0026#39;, \u0026#39;UserController@create\u0026#39;)-\u0026gt;name(\u0026#39;create\u0026#39;); Route::post(\u0026#39;/\u0026#39;, \u0026#39;UserController@store\u0026#39;)-\u0026gt;name(\u0026#39;store\u0026#39;); // 編輯 Route::get(\u0026#39;/{user}/edit\u0026#39;, \u0026#39;UserController@edit\u0026#39;)-\u0026gt;name(\u0026#39;edit\u0026#39;); Route::patch(\u0026#39;/{user}\u0026#39;, \u0026#39;UserController@update\u0026#39;)-\u0026gt;name(\u0026#39;update\u0026#39;); // 刪除 Route::delete(\u0026#39;/{user}\u0026#39;, \u0026#39;UserController@destroy\u0026#39;)-\u0026gt;name(\u0026#39;destroy\u0026#39;); }); 可以看到 『列表』、『新增』、『更新』、『刪除』的路由設定， 為何我要這樣設定呢？\n因為 Laravel 對於這件事有做好的功能， 上面的內容可以簡化成\n1 Route::resource(\u0026#39;users\u0026#39;, \u0026#39;UserController\u0026#39;); 而我們要如何便利的去對應這些路由呢？\n你只要下\n1 php artisan make:controller UserController -r (圖片是因應下一篇文章需要)\nLaravel 就會幫你產生好剛剛的路由所有對應到的 controller 的 functions\n相當方便。\n產生的檔案會像下面這樣\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class UserController extends Controller { /** * 列表 */ public function index() { // } /** * 新增的頁面 */ public function create() { // } /** * 新增 */ public function store(Request $request) { // } /** * 顯示 */ public function show($id) { // } /** * 更新的頁面 */ public function edit($id) { // } /** * 更新 */ public function update(Request $request, $id) { // } /** * 刪除 */ public function destroy($id) { // } } ","date":"2022-11-22T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day22-make-resource-controller/","title":"Day 22. CRUD 很簡單 Resource Controller"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 20. Eloquent Polymorphic Relationships 多態的多對多\n今天要來分享 Collection\n主要 上文件\n資料庫取出來預設都是 collection，\n以前還不知道這東西時，都是全部轉成 array 在依照需求直接整理\n後來才慢慢發現 collection 這個好東西\n看起來跟 array 做一樣的事情\n不過 code 看起來會比較好看而且可讀性也比較高，會相對好維護\n以下提供幾個我常用的 function\nfunctions map() 你想將資料庫的值取出後，做一些加工整理就可以使用這個\n1 2 3 4 5 6 7 8 9 $products = Product::get(); $data = $products-\u0026gt;map(function($product) { return [ \u0026#39;code\u0026#39; =\u0026gt; $product-\u0026gt;code, \u0026#39;name\u0026#39; =\u0026gt; $product-\u0026gt;name, \u0026#39;price\u0026#39; =\u0026gt; $product-\u0026gt;price, ]; }); 以上如果使用 php 原生方法\n1 2 3 4 5 6 7 8 9 10 $products = Product::get(); $data = []; foreach($products as $product) { $data[] = [ \u0026#39;code\u0026#39; =\u0026gt; $product-\u0026gt;code, \u0026#39;name\u0026#39; =\u0026gt; $product-\u0026gt;name, \u0026#39;price\u0026#39; =\u0026gt; $product-\u0026gt;price, ]; } 是不是 map 使用上會比較好看一點呢？\ngroupBy() 概念跟資料庫的 groupby 很像，\n就是將資料群組起來\n群組起來的會當作他的 key\n以上面的例子\n1 2 3 4 5 $products = Product::get(); $data = $products-\u0026gt;groupBy(function($product) { return $product-\u0026gt;type; }); 商品就會依照他的類別 type 群組起來\nfilter() 沒啥好說的\n直接放範例你們就會懂了\n就是篩選你們要的資料而已\n1 2 3 4 5 6 7 $collection = collect([1, 2, 3, 4]); $filtered = $collection-\u0026gt;filter(function ($value, $key) { return $value \u0026gt; 2; }); $filtered-\u0026gt;all(); 結語 還有很多好方法， 我嘗嘗懊惱怎麼整理好資料時就會參考官方的 collection 的方法們\n","date":"2022-11-21T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day21-collection/","title":"Day 21. 資料整理好幫手 - Collection"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 19. Eloquent Polymorphic Relationships 多態的一對多\n今天要來分享 多態的多對多\n關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 主要內容 文件\n表的關係 假設我們今天要設計標籤管理\n貼文有標籤 影片也有標籤\n甚至標籤也有自己的資訊\n就是可以透過 第3張表多對多的方式關聯他們\n資料表關係如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 posts id - integer name - string videos id - integer name - string tags id - integer name - string taggables tag_id - integer taggable_id - integer taggable_type - string Model 設定 app/Models/Tag.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Tag extends Model { // 關聯貼文 public function posts() { return $this-\u0026gt;morphedByMany(Post::class, \u0026#39;taggable\u0026#39;); } // 關聯影片 public function videos() { return $this-\u0026gt;morphedByMany(Video::class, \u0026#39;taggable\u0026#39;); } } app/Models/Post.php\n1 2 3 4 5 6 7 class Post extends Model { public function tags() { return $this-\u0026gt;morphToMany(Tag::class, \u0026#39;taggable\u0026#39;); } } app/Models/Video.php\n1 2 3 4 5 6 7 class Video extends Model { public function tags() { return $this-\u0026gt;morphToMany(Tag::class, \u0026#39;taggable\u0026#39;); } } 如何使用 取得 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $post = Post::find(1); // post 取得 tag foreach ($post-\u0026gt;tags as $tag) { // } $tag = Tag::find(1); # tag 取得 video foreach ($tag-\u0026gt;videos as $video) { // } ","date":"2022-11-20T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day20-eloquent-relationships-polymorphic-many-to-many/","title":"Day 20. Eloquent Polymorphic Relationships 多態的多對多"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 18. Eloquent Polymorphic Relationships 多態的一對一 今天要來分享 多態的一對多\n關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 主要內容 文件\n表的關係 延續昨天的關係一張換多張的時候，\n貼文有多張圖片、使用者也有多張圖片 我可以透過第3張表去存取圖片\n資料表關係如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 users id - integer name - string posts id - integer name - string images id - integer url - string imageable_id - integer imageable_type - string Model 設定 app/Models/Image.php\n1 2 3 4 5 6 7 class Image extends Model { public function imageable() { return $this-\u0026gt;morphTo(); } } app/Models/User.php\n1 2 3 4 5 6 7 class User extends Model { public function images() { return $this-\u0026gt;morphMany(Image::class, \u0026#39;imageable\u0026#39;); } } app/Models/Post.php\n1 2 3 4 5 6 7 class Post extends Model { public function images() { return $this-\u0026gt;morphMany(Image::class, \u0026#39;imageable\u0026#39;); } } 如何使用 取得 1 2 3 4 5 6 // 會員取得圖片 $user = User::find(1); $image = $user-\u0026gt;images; $image = Image::find(1); $imageable = $image-\u0026gt;imageable; ","date":"2022-11-19T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day19-eloquent-relationships-polymorphic-one-to-many/","title":"Day 19. Eloquent Polymorphic Relationships 多態的一對多"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 17. Eloquent Relationships 多對多\n今天要來分享 多態的一對一\n關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 主要內容 文件\n表的關係 貼文有一張圖片、使用者也有一張圖片\n我可以透過第3張表去存取圖片\n資料表關係如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 users id - integer name - string posts id - integer name - string images id - integer url - string imageable_id - integer imageable_type - string Model 設定 app/Models/Image.php\n1 2 3 4 5 6 7 class Image extends Model { public function imageable() { return $this-\u0026gt;morphTo(); } } app/Models/User.php\n1 2 3 4 5 6 7 class User extends Model { public function image() { return $this-\u0026gt;morphOne(Image::class, \u0026#39;imageable\u0026#39;); } } app/Models/Post.php\n1 2 3 4 5 6 7 class Post extends Model { public function image() { return $this-\u0026gt;morphOne(Image::class, \u0026#39;imageable\u0026#39;); } } 如何使用 取得 1 2 3 4 5 6 // 會員取得圖片 $user = User::find(1); $image = $user-\u0026gt;image; $image = Image::find(1); $imageable = $image-\u0026gt;imageable; ","date":"2022-11-18T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day18-eloquent-relationships-polymorphic-one-to-one/","title":"Day 18. Eloquent Polymorphic Relationships 多態的一對一"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 16. Eloquent Relationships 一對多\n今天要來分享 多對多\n關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 Many To many (多對多) 文件\n表的關係 資料表關係如下\n1 2 3 4 5 6 7 8 9 10 11 users id - integer name - string roles id - integer name - string role_user user_id - integer role_id - integer Model 設定 app/Models/User.php\n1 2 3 4 5 6 7 class User extends Model { public function roles() { return $this-\u0026gt;belongsToMany(Role::class); } } app/Models/Role.php\n1 2 3 4 5 6 7 class Role extends Model { public function users() { return $this-\u0026gt;belongsToMany(User::class); } } 如何使用 取得 1 2 3 // 會員取得角色 $user = User::find(1); $roles = $user-\u0026gt;roles; 新增 / 修改 / 刪除 1 2 3 4 5 6 7 8 9 10 11 $user = App\\User::find(1); $rolesId = [1, 2, 3]; # 新增 attach $user-\u0026gt;roles()-\u0026gt;attach($rolesId); # 刪除 detach $user-\u0026gt;roles()-\u0026gt;detach($rolesId); # sync 自動新增、刪除 $user-\u0026gt;roles()-\u0026gt;sync($rolesId); snyc 會自動判斷 要新增還是刪除，滿方便的\n進階 中間表加入時間戳 預設的中間表只有 兩個有關係表的ID，時間戳要自己加\n加也很容易，就是關聯的時候加上 withTimestamps() 就可以\n1 2 return $this-\u0026gt;belongsToMany(Role::class) -\u0026gt;withTimestamps(); 自定義使用中間表 我們預設使用中間表都是使用 pivot\n使用方式如下\n1 2 3 4 5 $user = User::find(1); foreach ($user-\u0026gt;roles as $role) { echo $role-\u0026gt;pivot-\u0026gt;created_at; } 所以如果要字定義的話可以再關聯的時候使用 as 參考一下範例\n1 2 3 return $this-\u0026gt;belongsToMany(Role::class) -\u0026gt;as(\u0026#39;rrr\u0026#39;) -\u0026gt;withTimestamps(); 使用的時候就會變成 \u0026hellip;\n1 2 3 foreach ($user-\u0026gt;roles as $role) { echo $role-\u0026gt;rrr-\u0026gt;created_at; } 自訂中間表 中間表(pivot) 官方會有預設的表名，\n就是兩個關係表的表名，字母在前面的是前面\n如\n1 2 users - role_user - roles aaa - aaa_bbb - bbb 但其實有時候會不是妳要的名稱\n所以我們可以建 pivot 會員以及角色中間表 role_user 預設就是 RoleUser\n如果妳希望是 UserRole 的話 \u0026hellip;\n1 php artisan make:model UserRole -p 關聯的時候使用 using() 就可以了\n1 2 3 4 return $this-\u0026gt;belongsToMany(Role::class) -\u0026gt;using(UserRole::class) -\u0026gt;as(\u0026#39;rrr\u0026#39;) -\u0026gt;withTimestamps(); 結語 當初我要理解多對多也卡很久\n後來也是參考 Laravel Daily 的影片才會使用\n附上連結: Laravel Daily Pivot Table\n","date":"2022-11-17T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day17-eloquent-relationships-many-to-many/","title":"Day 17. Eloquent Relationships 多對多"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 15. Eloquent Relationships 一對一\n今天要來分享 一對多\n關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 One To many (一對多) 文件\n這裡因為我沒有想到，合適的架構所以就參考官方的表格關係，\n我們假設一個貼文有多個留言，\n表的關係 資料表關係如下\n1 2 3 4 5 6 7 posts id - integer name - string comments id - integer post_id integer Model 設定 app/Models/Post.php\n1 2 3 4 5 6 7 class Post extends Model { public function comments() { return $this-\u0026gt;hasMany(UserProfile::class); } } app/Models/Comment.php\n1 2 3 4 5 6 7 class Comment extends Model { public function post() { return $this-\u0026gt;belongesTo(Post::class); } } 這些 Model 關聯可以自定義欄位關聯，只是我都是使用預設的，\n跟著 Laravel 的設計走，就輕鬆很多\n不用額外指定欄位\n舉例自定義\n1 2 3 4 public function user() { return $this-\u0026gt;belongsTo(User::class, \u0026#39;foreign_key\u0026#39;, \u0026#39;other_key\u0026#39;); } 如何使用 1 2 3 4 5 6 7 // 文章取得留言 $post = Post::find(1); $comments = $post-\u0026gt;comments; // 留言取得文章 $comment = Comment::find(1); $post = $comment-\u0026gt;post; 小建議 我個人習慣 一對多的時候 function name會使用複數， 多對一的時候會使用單數\n如此一來使用上就更符合語意\n","date":"2022-11-16T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day16-eloquent-relationships-one-to-many/","title":"Day 16. Eloquent Relationships 一對多"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 14. 中介層 Middleware\n我們準備要來介紹 Laravel ORM 的 Relationships 了\n這階段我會區分比較多天來分享\n有哪些關聯？ 先附上文件\n以下是官方文件提供的所有關聯\nDefining Relationships One To One One To Many Many To Many Defining Custom Intermediate Table Models Has One Through Has Many Through Polymorphic Relationships One To One One To Many Many To Many Custom Polymorphic Types 先簡單介紹一下，還有我們不會全部都講\n本次分享 關聯 名稱 會分享? 備註 ✅ One To One 一對一 ⭕ One To Many 多對多 ⭕ Many To Many 多對多 ⭕ Custom 自定義關聯 ❌ 太深奧，原本的就滿夠用 Has One Through 一對一(多一層) ❌ 概念與一對一相同，就只是多一層 Has Many Through 一對多(多一層) ❌ 概念與一對多相同，就只是多一層 Polymorphic One To One 多態的一對一 ⭕ Polymorphic One To Many 多態的一對多 ⭕ Polymorphic Many To Many 多態的多對多 ⭕ Custom Polymorphic Types 多態的自定義關聯 ❌ 太深奧，原本的就滿夠用 關聯表文章區 關聯 名稱 傳送門 One To One 一對一 Day 15. Eloquent Relationships 一對一 One To Many 多對多 Day 16. Eloquent Relationships 一對多 Many To Many 多對多 Day 17. Eloquent Relationships 多對多 Polymorphic One To One 多態的一對一 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Polymorphic One To Many 多態的一對多 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Polymorphic Many To Many 多態的多對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 One To One (一對一) 文件\n表的關係 1 2 3 4 5 6 7 users id - integer name - string user_profiles id - integer user_id integer 上次我們有建使用者基本資料 user_profiles他們關係可以參考圖片，\n一個使用者只會對應到一個基本資料\nModel 設定 所以我們可以去設定我們的 Model\napp/Models/User.php\n1 2 3 4 5 6 7 class User extends Authenticatable implements MustVerifyEmail { public function profile() { return $this-\u0026gt;hasOne(UserProfile::class); } } app/Models/UserProfile.php\n1 2 3 4 5 6 7 class UserProfile extends Model { public function user() { return $this-\u0026gt;belongesTo(User::class); } } 如何使用 1 2 $user = User::find(1); $profile = $user-\u0026gt;profile; 這樣就能成功取得使用者的基本資料了\n","date":"2022-11-15T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day15-eloquent-relationships-one-to-one/","title":"Day 15. Eloquent Relationships 一對一"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 13. 第二個頁面: 個人資料維護\n今天來跟大家分享 中介層 - Middleware 先前我們宣告路由直接指向負責的 Controller 以及 Function，\n有時候可能會有一些資料的預處理或者是權限的設定\n如: 這個頁面需要先登入才能使用 \u0026hellip;\n這時候就可以使用 middleware 處理這一段 Laravel 也有提供一些預設的 middleware\n今天我們先著重聊 middleware 基本設定以及使用\n之後在教大家自定義\n設定檔 我們可以先看到 /app/Http/Kernel.php 是設定 middleware 的地方\n檔案裏面會看到3個 array\n全域 middleware $middleware 這是全域的，只要設定在這每個頁面都會執行\n1 2 3 4 5 6 7 8 9 protected $middleware = [ // \\App\\Http\\Middleware\\TrustHosts::class, \\App\\Http\\Middleware\\TrustProxies::class, \\Fruitcake\\Cors\\HandleCors::class, \\App\\Http\\Middleware\\CheckForMaintenanceMode::class, \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class, \\App\\Http\\Middleware\\TrimStrings::class, \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class, ]; 群組 middleware $middlewareGroups 這是群組的，可以將你設定的 middleware 分群，\n就可以不用一個一個使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 protected $middlewareGroups = [ \u0026#39;web\u0026#39; =\u0026gt; [ \\App\\Http\\Middleware\\EncryptCookies::class, \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class, \\Illuminate\\Session\\Middleware\\StartSession::class, // \\Illuminate\\Session\\Middleware\\AuthenticateSession::class, \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class, \\App\\Http\\Middleware\\VerifyCsrfToken::class, \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, ], \u0026#39;api\u0026#39; =\u0026gt; [ \u0026#39;throttle:60,1\u0026#39;, \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, ], ]; 官方預設 route/web.php 就吃他的 web 群組，可以參考 /app/Providers/RouteServiceProvider.php 得知\n指派給路由的 Middleware $routeMiddleware 這是設定在路由的，也可以設定在 controller 的 __construct()\n1 2 3 4 5 6 7 8 9 10 11 12 protected $routeMiddleware = [ \u0026#39;auth\u0026#39; =\u0026gt; \\App\\Http\\Middleware\\Authenticate::class, \u0026#39;auth.basic\u0026#39; =\u0026gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class, \u0026#39;bindings\u0026#39; =\u0026gt; \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class, \u0026#39;cache.headers\u0026#39; =\u0026gt; \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class, \u0026#39;can\u0026#39; =\u0026gt; \\Illuminate\\Auth\\Middleware\\Authorize::class, \u0026#39;guest\u0026#39; =\u0026gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class, \u0026#39;password.confirm\u0026#39; =\u0026gt; \\Illuminate\\Auth\\Middleware\\RequirePassword::class, \u0026#39;signed\u0026#39; =\u0026gt; \\Illuminate\\Routing\\Middleware\\ValidateSignature::class, \u0026#39;throttle\u0026#39; =\u0026gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class, \u0026#39;verified\u0026#39; =\u0026gt; \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class, ]; 使用 使用的方法有很多種， 我習慣把 middleware 設定在 route，這樣能一目了然知道哪些地方有 middleware 像我們上次編輯個人資料頁，只有登入後才能使用，\n這時候可以設定 auth 的 middleware\n方法一 (route) 1 2 3 4 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;profile\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;profile.\u0026#39; ], function() { Route::get(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@edit\u0026#39;)-\u0026gt;name(\u0026#39;edit\u0026#39;); Route::post(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@update\u0026#39;)-\u0026gt;name(\u0026#39;update\u0026#39;); })-\u0026gt;middleware(\u0026#39;auth\u0026#39;); 方法二 (route) 1 2 3 4 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;profile\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;profile.\u0026#39;, \u0026#39;middleware\u0026#39; =\u0026gt; \u0026#39;auth\u0026#39; ], function() { Route::get(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@edit\u0026#39;)-\u0026gt;name(\u0026#39;edit\u0026#39;);1 Route::post(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@update\u0026#39;)-\u0026gt;name(\u0026#39;update\u0026#39;); }); 方法三 (controller) 1 2 3 4 5 6 7 8 9 class ProfileController extends Controller { public function __construct() { $this-\u0026gt;middleware(\u0026#39;auth\u0026#39;); } // ... } 測試 這時候打開無痕頁面直接執行 /profile 頁面就會直接被導向登入頁了！\n","date":"2022-11-14T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day14-middleware/","title":"Day 14. 中介層 Middleware"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 12. Eloquent: Model\n今天我們要做第二個頁面了\n主要 這次要來更新個人資料，\n我們把會員跟個人資料表分開，所以這次要更新兩張表 users、 user_profiles\n建立 route 開啟檔案 route/web.php 設定路由\n1 2 3 4 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;profile\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;profile.\u0026#39; ], function() { Route::get(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@edit\u0026#39;)-\u0026gt;name(\u0026#39;edit\u0026#39;); Route::post(\u0026#39;/\u0026#39;, \u0026#39;ProfileController@update\u0026#39;)-\u0026gt;name(\u0026#39;update\u0026#39;); }); 建立 controller 1 php artisan make:controller ProfileController 建立 controller function 們 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class ProfileController extends Controller { /** * 顯示 */ public function edit() { } /** * update */ public function update(Request $reqest) { } } 建立 view及入口 我把入口放在右上角登出的下拉選單中,\nroute('profile.edit') 為我們剛剛設定的路由的名稱\n1 2 3 4 5 6 7 \u0026lt;div class=\u0026#34;dropdown-menu dropdown-menu-right\u0026#34; aria-labelledby=\u0026#34;navbarDropdown\u0026#34;\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;{{ route(\u0026#39;profile.edit\u0026#39;) }}\u0026#34;\u0026gt; 個人資料維護 \u0026lt;/a\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/div\u0026gt; 建立 view 我是直接複製 home.blade.php 的內容變 profile.blade.php\nold() 是 Laravel 表單的神奇魔法可以保留送出的值，\n之後 驗證(validation) 的單元會詳細解說\n調整 ProfileController 的 edit() view('profile', compact('user')) 為顯示 view 的畫面,\n第一個參數是 view 的頁面，第二個參數是要傳入的參數\n1 2 3 4 5 6 7 8 9 10 11 12 use Illuminate\\Support\\Facades\\Auth; class ProfileController extends Controller { public function edit() { $user = Auth::user(); return view(\u0026#39;profile\u0026#39;, compact(\u0026#39;user\u0026#39;)); } // ... } Auth 為目前登入的使用者，記得要 use Illuminate\\Support\\Facades\\Auth; 哦\n調整 ProfileController 的 update() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class ProfileController extends Controller { public function update(Request $reqest) { $user = Auth::user(); $user-\u0026gt;update([ \u0026#39;name\u0026#39; =\u0026gt; $reqest-\u0026gt;name ]); UserProfile::updateOrCreate([ \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id ], [ \u0026#39;gender\u0026#39; =\u0026gt; $reqest-\u0026gt;gender, \u0026#39;birthday\u0026#39; =\u0026gt; $reqest-\u0026gt;birthday, \u0026#39;address\u0026#39; =\u0026gt; $reqest-\u0026gt;address, ]); session()-\u0026gt;flash(\u0026#39;status\u0026#39;, \u0026#39;更新成功。\u0026#39;); return redirect()-\u0026gt;route(\u0026#39;home\u0026#39;); } } 這樣就完成簡單的會員基本資料更新了。\n","date":"2022-11-13T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day13-user-profile/","title":"Day 13. 第二個頁面: 個人資料維護"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 11. 建立資料表: Migration\n今天來分享 Laravel 的 model 名為 Eloquent ORM\n主要 上！文！件！\nEloquent 也是我覺得 Laravel 很香的原因之一，\n這邊簡單介紹一下，關聯的部份之後再獨立聊\n基本設定 基本設定文件\n自定義 Table Name 1 2 3 4 class User extends Model { protected $table = \u0026#39;user_list\u0026#39;; } 自定義 Primary Keys 1 2 3 4 class User extends Model { protected $primaryKey = \u0026#39;pid\u0026#39;; } 軟刪除 我們常常會設定軟刪除在大部分的表，因為避免資料刪除後無法回溯問題，\n這時候我們就需要在 Model use SoftDeletes; 當然我要還要設定 migration $table-\u0026gt;softDeletes();\nmigration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class CreateUsersTable extends Migration { /** * Run the migrations. * * @return void */ public function up() { Schema::create(\u0026#39;users\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;string(\u0026#39;name\u0026#39;); $table-\u0026gt;string(\u0026#39;email\u0026#39;)-\u0026gt;unique(); $table-\u0026gt;timestamp(\u0026#39;email_verified_at\u0026#39;)-\u0026gt;nullable(); $table-\u0026gt;string(\u0026#39;password\u0026#39;); $table-\u0026gt;rememberToken(); $table-\u0026gt;timestamps(); $table-\u0026gt;softDeletes(); // *** 這個 }); } /** * Reverse the migrations. * * @return void */ public function down() { Schema::dropIfExists(\u0026#39;users\u0026#39;); } } model 1 2 3 4 5 6 7 use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Database\\Eloquent\\SoftDeletes; class User extends Model { use SoftDeletes; // *** 這個 } 方便的方法們 搜尋 find() find 可以直接找 Primary Keys\n1 User::find(1) 新增 create() 傳入整個 array\n1 2 3 User::create([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;abc\u0026#39; ]); 更新 update() 傳入整個 array\n1 2 3 4 $user = User::find(1); $user-\u0026gt;update([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;abc\u0026#39; ]); 直接存 save() 也分以單獨存取最後再 save() 就好。\n1 2 3 $user = User::find(1); $user-\u0026gt;name = \u0026#39;abc\u0026#39;; $user-\u0026gt;save(); 更新或刪除 updateOrCreate() 顧名思義就是找不到我就新增，找得到我就修改\n第一個參數是條件，\n第二個參數是值\n1 2 3 4 5 User::updateOrCreate([ \u0026#39;id\u0026#39; =\u0026gt; 1, ], [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;abc\u0026#39; ]); 刪除 delete() 1 2 $user = User::find(1); $user-\u0026gt;delete(); 常用的條件 Scopes 有些比較常用搜尋條件可以透過這個\nScopes 分成 global 跟 local\n我這邊只介紹 local， global 基本上用不到\nglobal Scopes 是全域的概念，每次Query 都會附加上去的 搜尋條件\n方法如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class User extends Model { /** * Scope a query to only include active users. * * @param \\Illuminate\\Database\\Eloquent\\Builder $query * @return \\Illuminate\\Database\\Eloquent\\Builder */ public function scopeActive($query) { return $query-\u0026gt;where(\u0026#39;active\u0026#39;, 1); } } // 使用方法 User::active()-\u0026gt;get() ","date":"2022-11-12T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day12-eloquent/","title":"Day 12. Eloquent: Model"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 10. Authentication-3 忘記密碼/重設密碼\n結束會員註冊登入流程\n準備要來跟大家聊聊 Model\n聊 Model 之前，先分享一下用來建立資料表的工具 - Migration，\n主要 一樣，上文件\n我們平常 寫 code 版控有 git 可以追蹤 code 的版本及異動，\nmigration 簡單說就是資料表的 git、資料表的版本控制 Laravel 會透過這些 migration 的檔案們，執行對資料表的異動\n建立 migration Model、migration 一起建立 平常我都是建立 model 順便建立 mgiration\n假設我今天要建立一個 UserProfile， 只要在 make:model 時 -m 就會一起產生 migration 相對省事\n指令\n1 php artisan make:model Models/UserProfile -m 也可以單獨 建立 migration、Model migration 命名規則是這樣的 create_\u0026lt;table_name\u0026gt;_table\n/database/migrations/ 就會產生對應的檔案 1 php artisan make:migration create_user_profiles_table Model 1 php artisan make:model Model/UserProfile 編輯 migration 這裡我們先略過 Model 不談，執行完上面後就可以編輯你們的 Migration 了\n檔案 database/migrations/2022_11_14_122200_create_user_profiles_table.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class CreateUserProfilesTable extends Migration { public function up() { Schema::create(\u0026#39;user_profiles\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;timestamps(); }); } public function down() { Schema::dropIfExists(\u0026#39;user_profiles\u0026#39;); } } 這邊你會看到兩個 function，up()、down()\nup() 主要放你要執行的資料表結構宣告 ex: varchar、int、date。之類的\ndown() 每次執行一次 migrater就會有一個 batch(版本)\ndown 就是 rollbak migrate 要使用的被回滾的資料表\n這邊都是 create table 所以都是 drop 那個 table\n資料表欄位如何宣告? 附上 文件\n裏面有附上所有資料庫的型別，看你需要哪些欄位\n外來鍵 外來鍵如果要關聯比較特別 我都直接這樣宣告\n可以參考 文件\n1 2 3 4 5 6 7 8 9 $table-\u0026gt;foreignId(\u0026#39;user_id\u0026#39;) -\u0026gt;constrained(\u0026#39;users\u0026#39;) -\u0026gt;onUpdate(\u0026#39;cascade\u0026#39;) -\u0026gt;onDelete(\u0026#39;cascade\u0026#39;); // $table // -\u0026gt;foreignId(\u0026#39;\u0026lt;你的欄位名稱\u0026gt;\u0026#39;) // -\u0026gt;constrained(\u0026#39;\u0026lt;你要關聯的表\u0026gt;\u0026#39;) // -\u0026gt;onUpdate(\u0026#39;cascade\u0026#39;) // -\u0026gt;onDelete(\u0026#39;cascade\u0026#39;); Table註解 基本上我每個上去的欄位都會註解，table 也不例外\n不過 Laravel Migration 沒有表的註解\n所以我都透過 DB class 直接對表註解\n指令如下\n1 2 3 4 5 // use use Illuminate\\Support\\Facades\\DB; // Table註解 DB::statement(\u0026#34;ALTER TABLE `user_profiles` comment \u0026#39;使用者基本資料\u0026#39;\u0026#34;); 執行 migration 只需要執行這個指令就會依照剛剛建立的產生資料表\n1 php artisan migrate 後悔了要回滾 table 1 php artisan migrate:rollback 每次回滾 migration 就是回滾最新的 batch 一次\n如果要多版號可以\n1 2 # 回滾 3 個 batch php artisan migrate:rollback --batch=3 如果要全部重來可以\n1 php artisan migrate:reset 基本上除非開發階段，很少會 rollback/reset\n捲土重來 開發階段很好用的指令，全部回滾再全部重建 refresh\n1 php artisan migrate:refresh 這樣就會全部依照原本的樣子全部重跑，\n當然此時的 batch 會全部變成 1 哦，因為重來了\n狀態 可以透過這個指令查看目前執行狀況\n1 php artisan migrate:status ","date":"2022-11-11T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day11-migration/","title":"Day 11. 建立資料表: Migration"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 9. Authentication-2 信箱驗證 今天來跟大家 忘記密碼/重設密碼\n主要 一樣附上文件給大家 here!\n忘記密碼/重設密碼其實於 php artisan ui bootstrap --auth 產生時就有了\n只是還是簡單帶一下這個功能\nDEMO 收信 於登入頁面點擊忘記密碼並至信箱收信 重新設定密碼 搞定 ！\n結語 根據這三篇，基本上就快速的使用 Laravel 會員註冊登入等相關流程了，製作上其實相當便利\nDay 8. Authentication-1 登入註冊 Day 9. Authentication-2 信箱驗證 Day 10. Authentication-3 忘記密碼/重設密碼 ","date":"2022-11-10T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day10-auth-reset-password/","title":"Day 10. Authentication-3 忘記密碼/重設密碼"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 8. Authentication-1 登入註冊 今天來跟大家 信箱驗證\n主要 信箱驗證其實也滿簡單的就是依照官方設定即可\n一樣附上文件給大家 here!\n設定 smtp 開啟 .env 設定，可以使用自己的 gmail 信箱寄信\n可以參考別人分享的教學文\n1 2 3 4 5 6 7 8 MAIL_DRIVER=smtp MAIL_HOST=smtp.gmail.com MAIL_PORT=465 MAIL_USERNAME=xxx@gmail.com MAIL_PASSWORD=xxxx MAIL_ENCRYPTION=ssl MAIL_FROM_ADDRESS=xxx@gmail.com MAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34; 設定 User Model 開啟檔案 App\\Models\\User.php 加上 implements MustVerifyEmail\n1 2 3 4 5 6 7 8 9 10 11 12 namespace App\\Models; use Illuminate\\Contracts\\Auth\\MustVerifyEmail; use Illuminate\\Foundation\\Auth\\User as Authenticatable; use Illuminate\\Notifications\\Notifiable; class User extends Authenticatable implements MustVerifyEmail { use Notifiable; // ... } 調整路由 開啟 routes/web.php 在 調整\nAuth::routes();\nAuth::routes([\u0026lsquo;verify\u0026rsquo; =\u0026gt; true]);\n1 Auth::routes([\u0026#39;verify\u0026#39; =\u0026gt; true]); DEMO 可以試著註冊看看，\n就會收到驗證信了\n","date":"2022-11-09T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day9-auth-email-verify/","title":"Day 9. Authentication-2 信箱驗證"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 7. View 的模板引擎: Blade\n今天來跟大家 登入與註冊\n主要 Laravel 於註冊登入這段其實都做好了，\n附上文件 只要幾個指令再微調一下就可以直接使用了，相當便利\n移到目錄下，並依序執行即可\n安裝套件 1 composer require laravel/ui:^2.4 產生需要的檔案 1 php artisan ui bootstrap --auth php artisan ui 可以選擇其他驅動，\n官方是提供 vue 我個人習慣用 bootstrap 其他的可以參考 這裡\n執行完後可以看到 Laravel給你加了一些 Controller、view，\nroutes/web.php 則會出現 Auth::routes();這個就是提供登入註冊的所有路由，\n若想知道有哪些路由可以透過 php artisan route:list 確認\n畫面的 css、js 1 2 npm install npm run dev 執行到這基本畫面就完成了\n需要準備資料表 專案剛建立好時，會有 migrations 存放會員等相關的資料表\n執行\n1 php artisan migrate 搬移 Model 位置 這邊會使用到 Model User 先前有提到 Laravel 7 的 Model 會放在 app/\n我通常會再建一個資料夾於 app/Models 將 Model 放到裏面 記得要多檔搜尋，改一下有使用到 User 的地方\n1 2 mkdir app/Models mv app/User.php app/Models/User.php 修改 app/Models/User.php 的 namespace 為\nnamespace App;\nnamespace App\\Models;\n修改所有 use App\\User;\nDEMO 此時回到專案根目錄就可以在右上角看到 LOGIN 、RIGISTER 就大功告成了 ","date":"2022-11-08T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day8-auth-signup-signin/","title":"Day 8. Authentication-1 登入註冊"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 6. 第一個頁面: Controller \u0026amp; View\n今天來跟大家分享模板引擎 Blade 的使用方式\n使用 可以先參考 官方文檔\n基本語法都是使用 @\n舉個例子，\n我們平常使用的 if\n1 2 3 4 5 6 7 8 9 \u0026lt;?php if (true) { echo 1; } elseif (true) { echo 2; } else { echo 3; } ?\u0026gt; 使用blade的話，則是這樣用的\n1 2 3 4 5 6 7 @if (true) 1 @elseif (true) 2 @else 3 @endif 繼承使用 (extends、yield、section) 可以建立一個主要的 Blade，把 header、footer 放進去\n其他直接使用 @extend ，如以下範例\n主要檔案 resources/views/day7/layouts/app.blade.php 1 2 3 4 5 6 7 8 9 10 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;App Name - @yield(\u0026#39;title\u0026#39;)\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; @yield(\u0026#39;content\u0026#39;) \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 動態內容可以使用 @yield 與 @section 搭配\n內容檔案 resources/views/day7/testContent.blade.php 1 2 3 4 5 6 7 @extends(\u0026#39;day7.layouts.app\u0026#39;) @section(\u0026#39;title\u0026#39;, \u0026#39;測試標題\u0026#39;) @section(\u0026#39;content\u0026#39;) \u0026lt;p\u0026gt;測試內文.\u0026lt;/p\u0026gt; @endsection 直接引入 indclude 有些像是 header、footer 就可以使用 @indclude 的方式直接引入檔案\n以剛剛的 layouts/app 為例\n檔案 resources/views/day7/layouts/app.blade.php 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;App Name - @yield(\u0026#39;title\u0026#39;)\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; @include(\u0026#39;day7.layouts.header\u0026#39;) \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; @yield(\u0026#39;content\u0026#39;) \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 就可以在 resources/views/day7/layouts/header.blade.php 編寫 header 的內容， 這樣看起來就會更加乾淨一些。\nforeach 另外提一個，我們平常頁面很長會使用 foreach Laravel 在這一段還提供了 Loop 參數可以使用\n可以參考 loop 參數文件\nProperty Description $loop-\u0026gt;index The index of the current loop iteration (starts at 0). $loop-\u0026gt;iteration The current loop iteration (starts at 1). $loop-\u0026gt;remaining The iterations remaining in the loop. $loop-\u0026gt;count The total number of items in the array being iterated. $loop-\u0026gt;first Whether this is the first iteration through the loop. $loop-\u0026gt;last Whether this is the last iteration through the loop. $loop-\u0026gt;even Whether this is an even iteration through the loop. $loop-\u0026gt;odd Whether this is an odd iteration through the loop. $loop-\u0026gt;depth The nesting level of the current loop. $loop-\u0026gt;parent When in a nested loop, the parent\u0026rsquo;s loop variable. others method 之前 Day 5. 路由: Router 有提到 route method 我們就需要在表單設定 @method 1 2 3 \u0026lt;form\u0026gt; @method(\u0026#39;PUT\u0026#39;) \u0026lt;/form\u0026gt; 登入/訪客 有沒有登入也可以在 Blade 設定 1 2 3 4 5 6 7 @auth // 有登入 @endauth @guest // 訪客(未登入) @endguest DEMO 此時瀏覽　/bladeTest 就會看到頁面了！\n","date":"2022-11-07T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day7-blade/","title":"Day 7. View 的模板引擎: Blade"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 5. 路由: Router\n聊完路由，\n今天來跟大家分享，第一個頁面，透過 Controller 渲染的第一個　view\n使用 宣告一個路由 1 Route::get(\u0026#39;/firstView\u0026#39;, \u0026#39;FirstViewController@firstView\u0026#39;)-\u0026gt;name(\u0026#39;firstView\u0026#39;); 建立 Controller 1 php artisan make:controller FirstViewController 我都會在專案目錄底下執行 command line產生 Controller，\n(自己手動建立也可以)\n會產生 Controller 於 /app/Http/Controllers/ 底下， 我們可以\n加上我們剛剛路由設定的 function firstView() 於 function 裡 return view('name') 1 2 3 4 5 6 7 8 9 10 11 namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class FirstViewController extends Controller { public function firstView() { return view(\u0026#39;day6.firstView\u0026#39;); } } 建立 View 頁面都會放在 /resources/views/ 底下，\nLaravel 的 view 使用他們的模板引擎 blade，\n所以檔名都是 xxxx.blade.php，\nController function return 的 view　省略後綴(.blade.php)　為方便 DMEO 我就直接抓 welcome 的 view\nDEMO 此時瀏覽　/firstView 就會看到頁面了！\n","date":"2022-11-06T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day6-first-view/","title":"Day 6. 第一個頁面: Controller \u0026 View"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 專案連結: github - laravel7 之 30 天分享\n上一篇: Day 4. VSCode 套件推薦\n今天來跟大家分享，使用者的第一個路口：路由\n使用 可以先看看[官方文件](https://laravel.com/docs/7.x/routing 官方文件)\nRoute 的設定在 routes/ 裡面，平常最常使用的是 web.php、api.php，\n頁面用 web.php、API則可以使用 api.php，\n使用的語法是相同的，今天會以 web.php為範例進行介紹，\n基本語法 1 2 3 4 5 # method: GET， 路徑： /hello ，直接回傳： Hello World Route::get(\u0026#39;hello\u0026#39;, function () { return \u0026#39;Hello World\u0026#39;; }); 不過通常我們都會這樣使用，\n路由只設定路由，這個路由要幹嘛都會交給 Controller 處理，\n1 2 3 # method: GET， 路徑： /basicRouteUseController ，交給 BasicRouteController 的 Controller Class，Function 是 index() Route::get(\u0026#39;/basicRouteUseController\u0026#39;, \u0026#39;BasicRouteController@index\u0026#39;); 方法 Laravel 提供的路由有很多 method 可以設定，\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Route::get($uri, $callback); # 單純 post Route::post($uri, $callback); # post 通常使用在更新 Route::put($uri, $callback); Route::patch($uri, $callback); # post 刪除 Route::delete($uri, $callback); # 這個我沒有使用過 Route::options($uri, $callback); post如要設定其他 method 可於 html form 表單內設定 @method('PUT')\n1 2 3 \u0026lt;form\u0026gt; @method(\u0026#39;PUT\u0026#39;) \u0026lt;/form\u0026gt; 參數 參數使用大括號{}框起來，然後在 function 裡加參數即可使用\n1 2 3 4 5 6 7 8 # /route/web.php Route::get(\u0026#39;/basicRouteWithParam/{id}\u0026#39;, \u0026#39;BasicRouteController@show\u0026#39;); # /app/Http/Controllers/BasicRouteController.php @ show() public function show($id) { echo $id; } 命名 通常我所有的路由都會命名，這樣之後要使用上可以使用 helper 的 route() 直接調用，\n萬一哪天 uri 要變更時，只要異動 routes/web.php 即可，\n因為所有頁面都是使用 route name 調用\n使用方法\n1 2 Route::get(\u0026#39;/basicRouteDefineName\u0026#39;, \u0026#39;BasicRouteController@defineName\u0026#39;) -\u0026gt;name(\u0026#39;thisIsBasicRouteDefineName\u0026#39;); 如範例就可以使用 route('thisIsBasicRouteDefineName') 取得這個路由\n群組 官方有提供 Route::group 可以將路由們分組\n使用方式\n1 2 3 4 5 6 7 # prefix = 前綴 # as = name 的前綴 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;routeGroups\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;routeGroups\u0026#39; ], function() { Route::get(\u0026#39;/a\u0026#39;, \u0026#39;RouteGroupController@a\u0026#39;)-\u0026gt;name(\u0026#39;a\u0026#39;); Route::get(\u0026#39;/b\u0026#39;, \u0026#39;RouteGroupController@b\u0026#39;)-\u0026gt;name(\u0026#39;b\u0026#39;); Route::get(\u0026#39;/c\u0026#39;, \u0026#39;RouteGroupController@c\u0026#39;)-\u0026gt;name(\u0026#39;c\u0026#39;); }); 群組後，其實就等於是 \u0026hellip;\n1 2 3 4 5 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;routeGroups\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;routeGroups\u0026#39; ], function() { Route::get(\u0026#39;/routeGroups/a\u0026#39;, \u0026#39;RouteGroupController@a\u0026#39;)-\u0026gt;name(\u0026#39;routeGroups.a\u0026#39;); Route::get(\u0026#39;/routeGroups/b\u0026#39;, \u0026#39;RouteGroupController@b\u0026#39;)-\u0026gt;name(\u0026#39;routeGroups.b\u0026#39;); Route::get(\u0026#39;/routeGroups/c\u0026#39;, \u0026#39;RouteGroupController@c\u0026#39;)-\u0026gt;name(\u0026#39;routeGroups.c\u0026#39;); }); 表達上是一樣的，只是比較好閱讀而且看起來比較整齊\n小撇步 CRUD 肯定是一個頁面滿基本的需求，我通常會這樣設定， 之後再跟大家聊聊為何我都會這樣設定吧\n以會員『新增』、『修改』、『刪除』為範例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Route::group([\u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;users\u0026#39;, \u0026#39;as\u0026#39; =\u0026gt; \u0026#39;users.\u0026#39;], function () { // 列表 Route::get(\u0026#39;/\u0026#39;, \u0026#39;UserController@index\u0026#39;)-\u0026gt;name(\u0026#39;index\u0026#39;); // 新增 Route::get(\u0026#39;/create\u0026#39;, \u0026#39;UserController@create\u0026#39;)-\u0026gt;name(\u0026#39;create\u0026#39;); Route::post(\u0026#39;/\u0026#39;, \u0026#39;UserController@store\u0026#39;)-\u0026gt;name(\u0026#39;store\u0026#39;); // 編輯 Route::get(\u0026#39;/{user}/edit\u0026#39;, \u0026#39;UserController@edit\u0026#39;)-\u0026gt;name(\u0026#39;edit\u0026#39;); Route::patch(\u0026#39;/{user}\u0026#39;, \u0026#39;UserController@update\u0026#39;)-\u0026gt;name(\u0026#39;update\u0026#39;); // 刪除 Route::delete(\u0026#39;/{user}\u0026#39;, \u0026#39;UserController@destroy\u0026#39;)-\u0026gt;name(\u0026#39;destroy\u0026#39;); }); ","date":"2022-11-05T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day5-router/","title":"Day 5. 路由: Router"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 3. 環境設定\n今天來跟大家分享我平常使用 VSCode 開發 Laravel 時安裝的套件巴\nplugins DotENV 安裝這個後，編輯 .env 檔時就會有高亮，\n比較好閱讀、編輯\n網址：Link\nLaravel Blade Snippets Blade 是 Laravel view 的模本引擎，\n可以提高閱讀， snippet 也可以幫助開發\n網址：Link\nLaravel Extra Intellisense 開發時會有很多提時，如要使用哪一個 view、config 只要打前面就會提示可以比較不用翻找\n網址：Link\nLaravel goto view Controller 要 return view 的時候可以像點網址一樣，直接開啟檔案\n網址：Link\nPHP Namespace Resolver 右鍵 『imoport class』就自動幫你 use，\n完全不需要找 class 在哪裡，\n網址：Link\n","date":"2022-11-03T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day4-vscode-plugins/","title":"Day 4. VSCode 套件推薦"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 上一篇: Day 2. 安裝及資料夾介紹\n今天則要來介紹初始化的一些設定，\n伺服器設定 檔案資料夾要設定在 專案路徑/public/\nnginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 server { listen 80; listen [::]:80; # (1) 網址 server_name laravel7-30days.test; # (2)專案路徑 root /var/www/html/laravel7-30days/public; index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php$is_args$args; } location ~ \\.php$ { try_files $uri $uri/ =404; # (3) php使用 # local # fastcgi_pass unix:/var/run/php/php7.3-fpm.sock; # docker fastcgi_pass PHP7.3:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # for phpstorm / xdebug #fastcgi_param PHP_IDE_CONFIG serverName=localhost; fastcgi_buffers 8 128k; fastcgi_buffer_size 256k; # for long running debug sessions fastcgi_read_timeout 600; #fastcgi_intercept_errors on; include fastcgi_params; } location ~ /\\.ht { deny all; } } apache 我本地是使用 nginx , 沒有使用 apache\n這部份是參考網路上的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;VirtualHost *:80\u0026gt; # (1) 專案路徑 DocumentRoot \u0026#34;/var/www/html/laravel7-30days/public\u0026#34; # (2) 網址 ServerName laravel7-30days.test # (3) LOG的地方 ErrorLog \u0026#34;/var/www/html/laravel7-30days/storage/laravel7-30days_error.log\u0026#34; CustomLog \u0026#34;/var/www/html/laravel7-30days/storage/laravel7-30days_access.log\u0026#34; combined DirectoryIndex index.php # (4) 專案路徑 \u0026lt;Directory \u0026#34;/var/www/html/laravel7-30days/public\u0026#34;\u0026gt; AllowOverride All Order allow,deny Allow from all \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; 執行 於專案路徑底下執行\n1 2 3 4 5 6 7 8 9 #複製一個環境檔 cp .env.example .env # composer composer install # npm npm install #生成 .env key php artisan key:generate 設定 env 檔 .env 檔是納入 .gitignore 的所以很多個人設定的東西可以直接放在這，如網址、DB連線 等等\n基本設定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 網站名稱 APP_NAME=Laravel-30天 # 環境 本地(local) 測試(develop) 正式(production) 也可以依照個人喜好設定 APP_ENV=local # 網站必須的 key (執行 php artisan key:generate 就會產生) APP_KEY= # 是否要顯示錯誤 true|false APP_DEBUG=true # 網址 APP_URL=http://laravel7-30days.test Log Laravel 有自己的 LOG 可以查看，\n我都設定 daily 每天都會產生一個 LOG檔\n1 LOG_CHANNEL=daily 若想設定其他的可以參考文件\nDB 設定 1 2 3 4 5 6 DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= Redis 設定 1 2 3 REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379 Mail Server 發信用\n1 2 3 4 5 6 7 8 MAIL_MAILER=smtp MAIL_HOST=smtp.mailtrap.io MAIL_PORT=2525 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null MAIL_FROM_ADDRESS=null MAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34; 其他 以下設定我都是使用預設值，\n但還是簡單跟大家介紹一下\n隊列設定，可以參考 /config/queue.php 設定，預設是 sync，\n如寄信功能就可能需要設定，避免執行過程中畫面卡著。 1 QUEUE_CONNECTION=sync Broadcaster 廣播，可以發通知的功能\n可以參考 /config/broadcasting.php (這個我目前沒用過) 1 BROADCAST_DRIVER=log 快取設定，可以參考 /config/cache.php 1 CACHE_DRIVER=file Seesion 設定，可以參考 /config/session.php 1 2 SESSION_DRIVER=file SESSION_LIFETIME=120 結語 env 的設定，都是跟 /config/ 底下檔案息息相關，\n可以理解成 config 是預設值， env是設定值\n所以我開發時都會直接用 config() 調用他們。\n","date":"2022-11-02T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day3-environment/","title":"Day 3. 環境設定"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 環境建立的方式有很多種，這邊就不多做介紹，\n以下提幾個我知道的方式，\n之後寫相關的文章介紹\nWindows WAMP XAMPP Vagrant \u0026amp; Homestead Linux Nginx + php docker 安裝 安裝 composer Download\n移到你要安裝 Laravel的路徑，並執行\n1 composer create-project --prefer-dist laravel/laravel {{project_name}} \u0026#34;7.*\u0026#34; 如下圖範例\n1 composer create-project --prefer-dist laravel/laravel laravel7-30days \u0026#34;7.*\u0026#34; 資料夾介紹 安裝後，專案內就會長這樣\napp 很多開發的地方如 Controller、Middleware、Provider 等等\n資料夾名稱 作用 app/Console 放產生 Command Line 的地方，可以把排程放在這，然後執行 app/Exceptions 報錯的地方，也可以自定義 app/Http/Controller 放 Controller, 路由進來可以直接指向的地方 app/Http/Middleware 中介層，路由進 Controller 執行之前可以先執行的事情，如權限 app/Providers 專案執行會加載的地方，裏面有框架預設的 Provider，也可以自定義自己 Provider app/Models (自定義的) Laravel7的 Model 都是直接放在 app/ 我會把我的 Model 統一放在這個資料夾裏面 bootstrap 框架初始化的地方，基本上不會動到他。\nconfig 放設定檔的地方， 可以在任何地方使用 config() 調用， 也可以自定義config\n語法 : 文件\n1 config(\u0026#39;\u0026lt;檔名\u0026gt;.\u0026lt;key\u0026gt;.\u0026lt;key...\u0026gt;\u0026#39;) 範例 取得 config/app.php 的 \u0026ldquo;name\u0026rdquo;\n1 config(\u0026#39;app.name\u0026#39;) database 資料夾名稱 作用 database/factories 資料表種子工廠，產生假資料的地方 database/migrations 資料表的腳本，透過這個可以管理資料表的結構 database/seeds 可以產生資料表的值，也可以透過 Factories 產生大量假資料 public 對外開放的地方，伺服器(nginx|apache)要設定這個資料夾\nresources 放view、js、css 的地方\nroutes 路由，最常使用到 web.php\nstorage 放檔案的地方，LOG 也會放在這裡\ntests 單元測試用\nvendor composer install的套件，基本上不會動到他，只需要管理 composer.json 即可\nnode_modules 圖片沒有，但在執行 npm install 的時候會出現，放前端套件的地方\n其他檔案們 名稱 作用 composer.json 管理第三方套件的檔案 composer.lock composer install後產生的檔案 .env 環境設定檔 環境、DB連線、mailserver \u0026hellip; .env.example 環境設定範例檔 .gitignore git 的忽略檔 package.json npm 管理套件的地方 phpunit.xml 單元測試設定檔 server.php 沒設定 nginx、apache 可以 php artisan serve 就可以直接使用 webpack.mix.js 執行 npm run dev 或 npm run \u0026lt;any script\u0026gt; 的腳本 ","date":"2022-11-01T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/11/laravel7-30days-day2-installation/","title":"Day 2. 安裝及資料夾介紹"},{"content":"資源 Laravel7 30天: 目錄\n專案連結: github - laravel7 之 30 天分享\n前言 截至目前 Laravel 已經出到 version 9 了，\n再過幾個月可能就 version 10 了 (預計發佈時間: 2023/2/7)，\n距離我有在使用的 7 已經愈來愈遠了，\n很多新的用法，好的功能，很難享受到，覺得很可惜，\n所以我想把這個版本做個紀錄，\n之後可能會使用 Laravel 最新版本了 ~\nWhy Laravel 7 ? 過去我使用過很多 5.x 的版本，\n當時的我還不太會這個框架，很多功能不知道，\n總是喜歡用自己的方式直接把功能建立上去，\n反正能夠執行就好的概念\n於 2020年， 也是 Laravel 7 發佈的那年，\n慶幸剛好當時公司來了個神人產生文件、建立會議教學大家如何使用，\n使用至今也已經3年了，\n只能說 Laravel 使 PHP 更偉大。👍\nWhat is Laravel ? Laravel 是 PHP 的一個框架， MVC 的架構，\n使用上相當的便利，基於框架建立的功能，不會走鐘太嚴重，會比較好維護，\n好處：\n有非常多的使用者，很多不會的問題 google 都滿容易找到答案 有相對完整的文檔 資源很多:看不完的教學文章 你說好用到底哪裡好用？\n以下簡單舉例一下:\nartisan 可以用 command line 的方式做很多事 資料表 可以透過 migration 產生 Model 可以透過 Eloquent ORM 協助表的溝通 Route 控制路由的地方 Controller 就是可以拿來寫程式邏輯的地方 Blade 則是 view 的模版引擎，讓你放 html 的地方\n\u0026hellip; 哪些人適合閱讀這系列文章呢？ 正在使用 Laravel 7 初學 Laravel 想要上手 php 的框架 想接觸 php MVC 框架入門 ","date":"2022-10-30T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/day1.png","permalink":"https://www.chihyu.me/2022/10/laravel7-30days-day1-why-use-laravel/","title":"Day 1. 新手上路，聊聊我愛的 Laravel"},{"content":"資源 我會把 30天的範例程式碼放在github 連結\n目錄 Day 1. 新手上路，聊聊我愛的 Laravel Day 2. 安裝及資料夾介紹 Day 3. 環境設定 Day 4. VSCode 套件推薦 Day 5. 路由: Router Day 6. 第一個頁面: Controller \u0026amp; View Day 7. View 的模板引擎: Blade Day 8. Authentication-1 登入註冊 Day 9. Authentication-2 信箱驗證 Day 10. Authentication-3 忘記密碼/重設密碼 Day 11. 建立資料表: Migration Day 12. Eloquent: Model Day 13. 第二個頁面: 個人資料維護 Day 14. 中介層 Middleware Day 15. Eloquent Relationships 一對一 Day 16. Eloquent Relationships 一對多 Day 17. Eloquent Relationships 多對多 Day 18. Eloquent Polymorphic Relationships 多態的一對一 Day 19. Eloquent Polymorphic Relationships 多態的一對多 Day 20. Eloquent Polymorphic Relationships 多態的多對多 Day 21. 資料整理好幫手 - Collection Day 22. CRUD 很簡單 Resource Controller Day 23. 實作 TODO 練習 上篇:前置作業 Day 24. 實作 TODO 練習 下篇:畫面及功能 Day 25. Validation Day 26. Validation-2 Request 讓 Controller 更乾淨 Day 27. Session Day 28. Log Day 29. 分頁 Pagination Day 30. 結束 ","date":"2022-10-30T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel7-30days/wellcome.jpeg","permalink":"https://www.chihyu.me/2022/10/laravel7-30days-directory/","title":"目錄"},{"content":"前言 當我們的分支離主要分支愈來愈遠的時候\u0026hellip; 除了使用 merge 回自己的分支外，\n還有另一個選擇就是 rebase\nrebase 是什麼呢？ 一張圖片表示他，如下\n(圖片資料參考於 頁面)\n簡單來說呢，就是將原本 checkout 出來的點，變更為目標分支最新的點，\n只不過 rebase 後，因為原本自己的遠端分支沒有跟上，\n而且因為變更基準的關係，會沒有辦法直接 push上去， 需要 push -f強制將分支內容推上去，\n當然可以不用擔心會不會蓋到其他人的程式， 因為當你 rebase 後，有衝突妳就需要當下解了，\nExample 1 2 git rebase master git push origin fix-users -f ","date":"2022-09-27T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/09/git-cli-rebase/","title":"Git rebase 變更基準點"},{"content":"前言 使用的版本 Laravel: 7\nphp: 7.3\n我們都知道在 Laravel 裡面取得資料庫資料可以使用 Eloquent ORM 、Query Builder，\n今天就來聊聊兩者到底差在哪裡巴 ~\n主要內容 Eloquent ORM 透過物件的方式調用資料，\n可參考 文件，相關語法如下\n1 2 3 use App\\Models\\User; // ... User::where(\u0026#39;name\u0026#39;, \u0026#39;Jason\u0026#39;)-\u0026gt;first(); Query Builder 直接對資料表進行調用，\n可先參考 文件，相關語法如下\n1 2 3 use Illuminate\\Support\\Facades\\DB; // ... DB::table(\u0026#39;users\u0026#39;)-\u0026gt;where(\u0026#39;name\u0026#39;, \u0026#39;Jason\u0026#39;)-\u0026gt;first(); 以上兩段程式碼，都是在取 name = Jason 的人，取出來的值也能直接使用\n速度比較 因為我這段SQL比較簡單，所以很難看出速度哪個比較快\n於是我網路上找了一下資源，如下所示\n(圖片資料參考於 頁面)\nQuery Builder 調用的速度上比 Eloquent 還要快很多 (將近一倍)\n這樣你說 Query Builder 比較快，執行上語法也差異不大，為何還要選擇使用 Eloquent 呢？\nEloquent 優勢在哪裡？ 增加程式碼閱讀 relationship 關聯其他 Model Accessors Soft Deletes Scopes Mutators \u0026amp; Casting \u0026hellip;\u0026hellip; 等等功能 雖然 Eloquent 的效能比較不好，但因著這些強大功能覺得也是種取捨\n結論 我大部分的功能都會使用 Eloquent 與 Collection 達成一個組合技，規劃並完成，\n不過若是一次性或不太會異動的功能，感覺就可以考慮看看 Query Builder，\n雖然我還是都使用 Eloquent 畢竟遇到後續的需求修改，會相對提升可塑性(好讀、好改)\n","date":"2022-09-21T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-eloquent-or-query-builder.png","permalink":"https://www.chihyu.me/2022/09/laravel-magic-eloquent-or-query-builder/","title":"Laravel Eloquent Or Query Builder"},{"content":"intro 完全來自 文件 使用，\n根據取到array，組出所有的組合。\nmain 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function getCombinations($arrays) { $result = [[]]; foreach ($arrays as $property =\u0026gt; $property_values) { $tmp = []; foreach ($result as $result_item) { foreach ($property_values as $property_value) { $tmp[] = array_merge($result_item, [$property =\u0026gt; $property_value]); } } $result = $tmp; } return $result; } $combinations = getCombinations([ 1 =\u0026gt; [\u0026#39;a1\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;a3\u0026#39;], 2 =\u0026gt; [\u0026#39;b1\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;b3\u0026#39;], ]); example-output ","date":"2022-08-10T02:00:00+08:00","image":"https://www.chihyu.me/images/php/banner.jpg","permalink":"https://www.chihyu.me/2022/08/php-array-get-combinations/","title":"PHP Array - 各種可能的組合"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 // $list : 原始資料 // $sorts : 編排列表 // $item[\u0026#39;sort] : 欲排序的key $sorts = array(); foreach ($list as $item) { $sorts[] = $item[\u0026#39;sort\u0026#39;]; } $new_list = array_multisort($sorts, SORT_ASC, $list); ","date":"2022-08-07T02:00:00+08:00","image":"https://www.chihyu.me/images/php/banner.jpg","permalink":"https://www.chihyu.me/2022/08/php-array-deep-sort-by-key/","title":"PHP Array - 排序依照 key 值"},{"content":"intro 可參考 文件\nmain Laravel 預設的資料表名稱(TableName)都是 Model 名稱的複數，\n我習慣建立 make:model 時加上 -m，\n這樣建立 model時，也建立 migration, 資料表名稱(TableName) 也會幫我設定好,\nEX:\n1 php artisan make:model Member -m 但如果我需要獨立開的話，或table不是來自migration，\n我可以建立一個 Model,\n並直接定義他要使用的 Table，\n如此一來，\n這個Table就可以使用 Eloquent 的強大功能 ！\n範例 檔案: app\\Models\\Member.php\n1 2 3 4 class Member extends Model { protected $table = \u0026#39;member_list\u0026#39;; } ","date":"2022-08-04T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-eloquent-customize-table-name.png","permalink":"https://www.chihyu.me/2022/08/laravel-magic-eloquent-eloquent-customize-table-name/","title":"Laravel Eloquent 自定義資料表名稱(TableName)"},{"content":"前言 我使用的版本 Laravel: 7\nphp: 7.3\nspatie/laravel-permission: 3\n可先參考 文件\n介紹 每個網站開發往往都需要使用者的權限設定\n這些功能其實就那些 ~\n哪些角色可以使用? 哪些權限可以使用? spatie/laravel-permission 主要就是要解決這個問題 每個使用者可以設定多角色/多權限 相當方便\n快速上手 安裝及初始化 在終端機執行安裝 1 composer require spatie/laravel-permission 開啟專案檔案 config/app.php 1 2 3 4 \u0026#39;providers\u0026#39; =\u0026gt; [ // ... Spatie\\Permission\\PermissionServiceProvider::class, ]; 與終端機執行，引入套件的檔案 裡面含有 migration、config檔(config/permission.php) 1 php artisan vendor:publish --provider=\u0026#34;Spatie\\Permission\\PermissionServiceProvider\u0026#34; 再於終端機執行，建立資料表 1 php artisan migrate 在需要使用權限的Model 引用 1 2 3 4 5 6 7 8 9 use Illuminate\\Foundation\\Auth\\User as Authenticatable; use Spatie\\Permission\\Traits\\HasRoles; // ------ 加這個 Use Class** class User extends Authenticatable { use HasRoles; // ------ 加這個** // ... } 建立角色及權限 1 2 3 4 5 use Spatie\\Permission\\Models\\Role; use Spatie\\Permission\\Models\\Permission; $role = Role::create([\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;writer\u0026#39;]); $permission = Permission::create([\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;edit articles\u0026#39;]) 將角色設定某些權限 1 2 $role = Role::find(1); $role-\u0026gt;permissions()-\u0026gt;sync($permissions_id); 給使用者角色與權限 1 2 3 4 5 6 7 // 給角色 $role = Role::find($role_id); $user-\u0026gt;assignRole($role); // 給權限 $permission = Permission::find($permission_id); $user-\u0026gt;givePermissionTo($permission); 取得使用者角色或權限 取得使用者角色 1 2 $user = User::find(1); $roles = $user-\u0026gt;roles; 取得使用者權限 1 2 3 4 5 6 7 $user = User::find(1); # 方法一 $user-\u0026gt;getPermissionsViaRoles(); # 方法二 $user-\u0026gt;getAllPermissions(); 其他 更多資訊可以參閱他們官方的文件\n可先參考 文件\n結語 這個套件真的滿好用的\n且使用者也多，萬一遇到問題 Stackoverflow 也很多解法\n真心推薦給大家 😄\n","date":"2022-07-30T00:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-packages-spatie-laravel-permission.png","permalink":"https://www.chihyu.me/2022/07/laravel-magic-packages-spatie-laravel-permission/","title":"Laravel 用戶角色/權限輕鬆設定的套件"},{"content":"main 1 2 3 4 5 \\DB::enableQueryLog(); // Enable query log // ... query ... dd(\\DB::getQueryLog()); // Show results of log example 1 2 3 \\DB::enableQueryLog(); // Enable query log $product = Product::find(1); dd(\\DB::getQueryLog()); // Show results of log ","date":"2022-07-16T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-db-query-log.png","permalink":"https://www.chihyu.me/2022/07/laravel-magic-db-query-log/","title":"Laravel 取得區間的SQL"},{"content":"intro 可參考 文件\nmain Laravel 預設的 pKey 是 id\n在 Model 裡加入 $primaryKey 參數，就可以使用這個自定義 pKey，\n如此一來後續的關聯就不用每次都定義關聯的 key\n檔案: app\\Models\\Product.php\n1 2 3 4 class Product extends Model { protected $primaryKey = \u0026#39;product_id\u0026#39;; } ","date":"2022-07-10T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-eloquent-customize-primary-key.png","permalink":"https://www.chihyu.me/2022/07/laravel-magic-eloquent-customize-primary-key/","title":"Laravel Eloquent 自定義主鍵(primary-key)"},{"content":"Main 比對兩個版本，並將有異動的檔案匯出到指定目錄\n1 git archive --output=\u0026lt;/folder/filename\u0026gt;.tar HEAD $(git diff --name-only \u0026lt;commit_id\u0026gt; \u0026lt;commit_id\u0026gt;) Example 將版本 1b7760a 及 版本 d3be133 有異動的檔案，匯出到 /home/chihyu/Backup/ 檔名 test.tar\n1 git archive --output=/home/chihyu/Backup/test.tar HEAD $(git diff --name-only 1b7760a d3be133) ","date":"2022-07-02T14:11:17+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/07/git-cli-archive-export-files-with-diff/","title":"Git 匯出異動的檔案"},{"content":"intro 一般我們下 git diff 的時候，就會顯示所有異動的檔案、行、值 \u0026hellip;\n有時候其實只是想找出有異動的檔案\n可以使用 --name-only\nmain 1 git diff --name-only \u0026lt;commit_id\u0026gt; \u0026lt;commit_id\u0026gt; example 1 git diff --name-only 3b7760a 43be138 將版本 3b7760a 及 版本 43be138 有異動的檔案，列出來\n","date":"2022-07-01T14:20:46+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/07/git-cli-diff-name-only/","title":"Git 比對只顯示檔案列表"},{"content":"What is chunk 可以將 chunk 理解成\u0026hellip;\n我將一大組資料分「塊」處理，\n而不是逐筆處理\nWhy chunk 假設每筆就要執行一段SQL，\n這樣我 5000筆資料，就要執行 5000次\n如果我將這 5000 筆，每 500 分成一塊，我只要執行 10 次。\n如此一來可以有效縮減執行時間也降低了DB的負擔。\nHow to chunk Laravel chunk 分成三種\nQuery Builder chunk Eloquent chunk Collection chunk 假設情境 當我有好幾萬的會員，每年要贈送 100點的點數給他們，\n我們建立了一個排程，每年1月1日贈送，\n隨著會員數量的增加，執行時間會愈來愈久，\n我們必須著手優化這段排程 \u0026hellip;\nOriginal (No chunk) 當我們沒有chunk通常都是逐筆寫入\n這邊用 each 作為範例\n1 2 3 4 5 6 7 8 9 10 11 12 User::query() -\u0026gt;get() -\u0026gt;each(function($user) { Point::insert([ \u0026#39;amount\u0026#39; =\u0026gt; 100, \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;created_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), \u0026#39;updated_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), ]); }); Query Builder chunk 可參考 文件\n使用方式和 Eloquent chunk 相同\n所以我會在下方 Eloquent chunk 共同解釋\nEloquent chunk 可參考 官方文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 User::query() -\u0026gt;chunk(500, function($users) { $data = []; foreach ($users as $user) { $data[] = [ \u0026#39;amount\u0026#39; =\u0026gt; 100, \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;created_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), \u0026#39;updated_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), ]; } Point::insert($data); }); 運作的方式是用 SQL ，\n使用 limit 500 offset 0 、 limit 500 offset 500 \u0026hellip;.. 直到分完全部\n在 query 當下就分塊。\nCollection chunk 可參考 官方文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $chunks = User::query() -\u0026gt;get() -\u0026gt;map(function($user) { return [ \u0026#39;amount\u0026#39; =\u0026gt; 100, \u0026#39;user_id\u0026#39; =\u0026gt; $user-\u0026gt;id, \u0026#39;created_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), \u0026#39;updated_at\u0026#39; =\u0026gt; now()-\u0026gt;toDateTimeString(), ]; }) -\u0026gt;chunk(500) -\u0026gt;toArray(); foreach ($chunks as $chunk) { Point::insert($chunk); } 運作的方式是先都 query出來，再用 php 整理的，\n如圖所示\n比較 老實說使用哪一個其實感覺不出來，\n因為執行效率差不多，\nEloquent 吃DB資源，Collection 吃記憶體資源，\nCollection chunk 遇過直接網頁執行，記憶體吃掛了的問題，\n最後我還是選擇了 Eloquent chunk\n雖然 執行的SQL多了一些 query，但不會吃你記憶體，\n也是看大家取捨拉 ~\n這是我執行3千筆的資訊\n資料量 運用 花費時間 記憶體 3000筆 Original (No chunk) 6.6s 142MB 3000筆 Eloquent chunk 1.52s 33MB 3000筆 Collection chunk 1.49s 141MB 題外話 這裡的寫入使用了 Point::insert 為何不使用 Point::create ?\n是為了批次寫入及效率的問題考量，\n之後再來聊聊 Laravel insert \u0026amp; Laravel create 差異吧\n","date":"2022-06-25T02:00:00+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner-chunk.png","permalink":"https://www.chihyu.me/2022/06/laravel-magic-chunk/","title":"Laravel 大量寫入的好幫手 chunk"},{"content":"Laravel Magic 系列為我使用 Laravel 的時方便的功能、推荐的撇布等等 \u0026hellip;\n可以當作 Laravel 的雜記 ~\n我認為 Laravel 提供很多神奇方法，\n使用起來就像是魔術般的美妙\n故以此命名。👍👍👍\n","date":"2022-06-23T23:08:15+08:00","image":"https://www.chihyu.me/images/laravel-magic/banner.png","permalink":"https://www.chihyu.me/2022/06/laravel-magic-intro/","title":"Laravel Magic 系列 - 第1篇"},{"content":"Main 刪除遠端分支 1 git push origin :\u0026lt;branch\u0026gt; 刪除本地分支 1 git branch -d \u0026lt;branch\u0026gt; Example 1 2 3 4 5 6 # 刪除遠端分支 git push origin :fix-order # 刪除本地分支 git branch -d fix-order ","date":"2022-06-18T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/06/git-cli-delete-branch/","title":"Git 刪除分支"},{"content":"Intro 很多專案常需要開立新分支，避免大家功能打架或有些功能可能要先上線 \u0026hellip; 等等問題\n如果都使用同一個分支，就會很麻煩\n當然每個團隊，都有習慣的 git workflow， 覺得只要有效提升專案效率、協助分工，都是好方法\nMain 1 2 # -b create and checkout a new branch git checkout -b \u0026lt;branch\u0026gt; git checkout 同時也是切換分支的方法\nExample 1 2 3 4 5 6 # 在 master 分支，開立新分支 \u0026#34;develop\u0026#34; # 下這指令就會開立分支，同時切換過去那個分支 git checkout -b develop # 在 develop 分支切換回 master 分支 git checkout master ","date":"2022-06-15T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/06/git-cli-create-new-branch/","title":"Git 開新分支"},{"content":"Main 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #1 檢查目前異動狀態 git status #2 將檔案新增上去索引 git add . #3 再檢查一次異動狀態 git status #4 commit 上去 git commit -m \u0026#39;說明 xxxx\u0026#39; #5 最後 push 上去 git push origin \u0026lt;branch\u0026gt; ","date":"2022-06-11T00:00:00+08:00","image":"https://www.chihyu.me/images/git-cli/banner.jpg","permalink":"https://www.chihyu.me/2022/06/git-cli-push-to-origin/","title":"Git 如何更新程式至遠端"}]